<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Oracle 함수 예제</title>
    <link href="/2022/04/29/Oracle%20test%20from%20Oracle%20SQL/"/>
    <url>/2022/04/29/Oracle%20test%20from%20Oracle%20SQL/</url>
    
    <content type="html"><![CDATA[<h1 id="6장"><a href="#6장" class="headerlink" title="6장"></a>6장</h1><h2 id="1번"><a href="#1번" class="headerlink" title="1번"></a>1번</h2><p>질문 :<br>101번 사원에 대해<br><code>사번</code> <code>사원명</code> <code>job명칭</code> <code>job시작일자</code> <code>job종료일자</code> <code>job수행부서명</code>을 산출하는 쿼리를 작성해보자.</p><p>답 : </p><div class="hljs code-wrapper"><pre><code class="hljs mipsasm">SELECT a.employee_id, a.emp_name, d.<span class="hljs-keyword">job_title, </span><span class="hljs-keyword">b.start_date, </span><span class="hljs-keyword">b.end_date, </span>c.department_name  FROM employees a       ,<span class="hljs-keyword">job_history </span><span class="hljs-keyword">b</span><span class="hljs-keyword"></span>       ,departments c       ,<span class="hljs-keyword">jobs </span>d WHERE a.employee_id   = <span class="hljs-keyword">b.employee_id</span><span class="hljs-keyword"></span>   <span class="hljs-keyword">and </span><span class="hljs-keyword">b.department_id </span>= c.department_id   <span class="hljs-keyword">and </span><span class="hljs-keyword">b.job_id </span>       = d.<span class="hljs-keyword">job_id</span><span class="hljs-keyword"></span>   <span class="hljs-keyword">and </span>a.employee_id = <span class="hljs-number">101</span>;</code></pre></div><p>  <code>SELECT</code> 문에 <code>employee_id</code>, <code>emp_name</code>, <code>job_title</code>, <code>start_date</code>, <code>end_date</code>, <code>department_name</code>을 넣어주고 <code>WHERE</code>문에  <code>조인 연결</code>과 101번 사원을 명시해주면 된다.</p><h2 id="2번"><a href="#2번" class="headerlink" title="2번"></a>2번</h2><p> 질문 :<br>하단의 쿼리를 실행하면 오류가 발생한다.<br>그 이유는 무엇인가?<br>   <div class="hljs code-wrapper"><pre><code class="hljs mipsasm">SELECT a.employee_id, a.emp_name, <span class="hljs-keyword">b.job_id, </span><span class="hljs-keyword">b.department_id</span><span class="hljs-keyword"></span>      FROM employees a,           <span class="hljs-keyword">job_history </span><span class="hljs-keyword">b</span><span class="hljs-keyword"></span>     WHERE a.employee_id      = <span class="hljs-keyword">b.employee_id(+)</span><span class="hljs-keyword"></span>       <span class="hljs-keyword">and </span>a.department_id(+) = <span class="hljs-keyword">b.department_id;</span></code></pre></div></p><p>답 :<br><code>(+)</code>연산자의 경우 조인 대상 테이블 중 데이터가 없는 테이블에만 붙일 수가 있는데 </p><div class="hljs code-wrapper"><pre><code class="hljs n1ql"><span class="hljs-keyword">SELECT</span> department_id <span class="hljs-keyword">FROM</span> job_history;<span class="hljs-keyword">SELECT</span> department_id <span class="hljs-keyword">FROM</span> employees;</code></pre></div><p>으로 <code>employees</code>와 <code>job_history</code>의 <code>department_id</code>를 조회해보면 <code>employees</code>의 데이터가 더 많다는 것을 알 수 있다. 그러므로  <code>employees</code>가 아닌 <code>job_history</code>에 <code>(+)</code>를 붙여야 오류가 발생하지 않는다.</p><h2 id="3번"><a href="#3번" class="headerlink" title="3번"></a>3번</h2><p>질문 :<br>외부 조인을 사용할 때에 <code>(+)</code>연산자를 같이 사용할 수 없으나, <code>IN</code> 절에 사용하는 값이 한 개이면 사용이 가능하다.<br>그 이유는 무엇인가</p><p>답 : <code>(+)</code> 연산자와 <code>OR</code>은 함께 사용할 수 없다.<br>그러므로 <code>IN</code>절에 사용하는 값이 여러 개이면 <code>OR</code> 조건으로 들어가게 되기에 <code>IN</code>절 또한 사용할 수 없다.<br>하지만 <code>IN</code>절에 하나의 값만 있을 경우에는 <code>OR</code>조건이 아니기에 사용이 가능하다.</p><h2 id="4번"><a href="#4번" class="headerlink" title="4번"></a>4번</h2><p>질문 :  다음의 쿼리를 ANSI 문법으로 변경해 보자.</p><div class="hljs code-wrapper"><pre><code class="hljs mipsasm">SELECT a.department_id, a.department_name      FROM departments a, employees <span class="hljs-keyword">b</span><span class="hljs-keyword"></span>     WHERE a.department_id = <span class="hljs-keyword">b.department_id</span><span class="hljs-keyword"></span>       <span class="hljs-keyword">AND </span><span class="hljs-keyword">b.salary </span>&gt; <span class="hljs-number">3000</span>    <span class="hljs-keyword">ORDER </span><span class="hljs-keyword">BY </span>a.department_name;</code></pre></div><p> 답 : ANSI 문법으로 변경하라는 것은 ANSI 조인으로 변경하라는 뜻이다.<br> <div class="hljs code-wrapper"><pre><code class="hljs n1ql"><span class="hljs-keyword">SELECT</span> a.department_id, a.department_name<span class="hljs-keyword">FROM</span> departments a     <span class="hljs-keyword">INNER</span> <span class="hljs-keyword">JOIN</span> employees b     <span class="hljs-keyword">ON</span> (a.department_id = b.department_id)     <span class="hljs-keyword">WHERE</span> b.salary &gt; <span class="hljs-number">3000</span>     <span class="hljs-keyword">ORDER</span> <span class="hljs-keyword">BY</span> a.department_name;</code></pre></div><br><code>FROM</code>절에서 INNER JOIN을 쓴 다음, 기존에 <code>WHERE</code>절에 썼던 조인 조건을 <code>ON</code>절에 써준다. 나머지 다른 조건의 경우 기존대로 <code>WHERE</code>절에 써준다.</p><h2 id="5번"><a href="#5번" class="headerlink" title="5번"></a>5번</h2><p>질문 : 다음은 연관성 있는 서브 쿼리이다. 이를 연관성 없는 서브 쿼리로 변환해 보자</p><div class="hljs code-wrapper"><pre><code class="hljs n1ql"><span class="hljs-keyword">SELECT</span> a.department_id, a.department_name    <span class="hljs-keyword">FROM</span> departments a   <span class="hljs-keyword">WHERE</span> <span class="hljs-keyword">EXISTS</span> ( <span class="hljs-keyword">SELECT</span> <span class="hljs-number">1</span>                  <span class="hljs-keyword">FROM</span> job_history b                  <span class="hljs-keyword">WHERE</span> a.department_id = b.department_id );</code></pre></div><p>답 : </p><div class="hljs code-wrapper"><pre><code class="hljs css">SELECT <span class="hljs-selector-tag">a</span><span class="hljs-selector-class">.department_id</span>, <span class="hljs-selector-tag">a</span><span class="hljs-selector-class">.department_name</span> <span class="hljs-selector-tag">FROM</span> departments <span class="hljs-selector-tag">a</span>WHERE <span class="hljs-selector-tag">a</span><span class="hljs-selector-class">.department_id</span> IN ( SELECT department_id                            <span class="hljs-selector-tag">FROM</span> job_history  );</code></pre></div><p> 서브 쿼리는 <code>메인 쿼리와의 연관성</code>에 따라, 연관성 있는 서브 쿼리와 없는 서브 쿼리로 나뉜다. 연관성 없는 서브 쿼리는 <code>조인 조건</code>을 찾아 볼 수 없는 것이 특징이다.</p><h2 id="6번"><a href="#6번" class="headerlink" title="6번"></a>6번</h2><p>질문 :  연도별 이탈리아 최대매출액과 사원을 작성하는 쿼리를 학습했다. 이 쿼리를 기준으로 최대매출액 뿐만 아니라 최소 매출액과 해당사원을 조회하는 쿼리를 작성해보자.</p><div class="hljs code-wrapper"><pre><code class="hljs pgsql"><span class="hljs-keyword">SELECT</span> emp.years  <span class="hljs-comment">-- 연도</span>      ,emp.employee_id <span class="hljs-comment">-- 사원 아이디</span>      ,emp2.emp_name <span class="hljs-comment">-- 사원 이름</span>      ,emp.amount_sold  <span class="hljs-comment">-- 매출액</span><span class="hljs-keyword">FROM</span>(     <span class="hljs-keyword">SELECT</span> SUBSTR(a.sales_month, <span class="hljs-number">1</span>, <span class="hljs-number">4</span>) <span class="hljs-keyword">as</span> years <span class="hljs-comment">-- 연도 추출</span>    , a.employee_id    , SUM(a.amount_sold) <span class="hljs-keyword">AS</span> amount_sold    <span class="hljs-keyword">FROM</span>       sales a    , customers b    , countries c    <span class="hljs-keyword">WHERE</span> a.cust_id = b.cust_id      <span class="hljs-keyword">AND</span> b.country_id = c.country_id      <span class="hljs-keyword">AND</span> c.country_name = <span class="hljs-string">&#x27;Italy&#x27;</span>    <span class="hljs-keyword">GROUP</span> <span class="hljs-keyword">BY</span> SUBSTR(a.sales_month, <span class="hljs-number">1</span>, <span class="hljs-number">4</span>), a.employee_id    ) emp,<span class="hljs-comment">-- </span>    (<span class="hljs-keyword">SELECT</span> years,             MAX(amount_sold) <span class="hljs-keyword">AS</span> max_sold     <span class="hljs-keyword">FROM</span> (  <span class="hljs-comment">-- 인라인 뷰</span>       <span class="hljs-keyword">SELECT</span>                SUBSTR(a.sales_month, <span class="hljs-number">1</span>, <span class="hljs-number">4</span>) <span class="hljs-keyword">as</span> years            , a.employee_id            , SUM(a.amount_sold) <span class="hljs-keyword">AS</span> amount_sold        <span class="hljs-keyword">FROM</span>              sales a           , customers b           , countries c        <span class="hljs-keyword">WHERE</span> a.cust_id = b.cust_id        <span class="hljs-keyword">AND</span> b.country_id = c.country_id        <span class="hljs-keyword">AND</span> c.country_name = <span class="hljs-string">&#x27;Italy&#x27;</span>      <span class="hljs-keyword">GROUP</span> <span class="hljs-keyword">BY</span> SUBSTR(a.sales_month, <span class="hljs-number">1</span>, <span class="hljs-number">4</span>), a.employee_id      ) K       <span class="hljs-keyword">GROUP</span> <span class="hljs-keyword">BY</span> years      ) sale,emp2 <span class="hljs-keyword">WHERE</span> emp.years = sale.years  <span class="hljs-keyword">AND</span> emp.amount_sold = sale.max_sold  <span class="hljs-keyword">AND</span> emp.employee_id = emp2.employee_id<span class="hljs-keyword">ORDER</span> <span class="hljs-keyword">BY</span> years;</code></pre></div><p>답 :</p><div class="hljs code-wrapper"><pre><code class="hljs pgsql"><span class="hljs-keyword">SELECT</span> emp.years  <span class="hljs-comment">-- 연도</span>      ,emp.employee_id <span class="hljs-comment">-- 사원 아이디</span>      ,emp2.emp_name <span class="hljs-comment">-- 사원 이름</span>      ,emp.amount_sold  <span class="hljs-comment">-- 매출액</span><span class="hljs-keyword">FROM</span>(     <span class="hljs-keyword">SELECT</span> SUBSTR(a.sales_month, <span class="hljs-number">1</span>, <span class="hljs-number">4</span>) <span class="hljs-keyword">as</span> years <span class="hljs-comment">-- 연도 추출</span>    , a.employee_id    , SUM(a.amount_sold) <span class="hljs-keyword">AS</span> amount_sold    <span class="hljs-keyword">FROM</span>       sales a    , customers b    , countries c    <span class="hljs-keyword">WHERE</span> a.cust_id = b.cust_id      <span class="hljs-keyword">AND</span> b.country_id = c.country_id      <span class="hljs-keyword">AND</span> c.country_name = <span class="hljs-string">&#x27;Italy&#x27;</span>    <span class="hljs-keyword">GROUP</span> <span class="hljs-keyword">BY</span> SUBSTR(a.sales_month, <span class="hljs-number">1</span>, <span class="hljs-number">4</span>), a.employee_id    ) emp,<span class="hljs-comment">-- </span>    (<span class="hljs-keyword">SELECT</span> years,             MAX(amount_sold) <span class="hljs-keyword">AS</span> max_sold             MIN(amount_sold) <span class="hljs-keyword">AS</span> min_sold     <span class="hljs-keyword">FROM</span> (  <span class="hljs-comment">-- 인라인 뷰</span>       <span class="hljs-keyword">SELECT</span>                SUBSTR(a.sales_month, <span class="hljs-number">1</span>, <span class="hljs-number">4</span>) <span class="hljs-keyword">as</span> years            , a.employee_id            , SUM(a.amount_sold) <span class="hljs-keyword">AS</span> amount_sold        <span class="hljs-keyword">FROM</span>              sales a           , customers b           , countries c        <span class="hljs-keyword">WHERE</span> a.cust_id = b.cust_id        <span class="hljs-keyword">AND</span> b.country_id = c.country_id        <span class="hljs-keyword">AND</span> c.country_name = <span class="hljs-string">&#x27;Italy&#x27;</span>      <span class="hljs-keyword">GROUP</span> <span class="hljs-keyword">BY</span> SUBSTR(a.sales_month, <span class="hljs-number">1</span>, <span class="hljs-number">4</span>), a.employee_id      ) K       <span class="hljs-keyword">GROUP</span> <span class="hljs-keyword">BY</span> years      ) sale,emp2 <span class="hljs-keyword">WHERE</span> emp.years = sale.years  <span class="hljs-keyword">AND</span> (emp.amount_sold = sale.max_sold <span class="hljs-keyword">OR</span> emp.amount_sold = sale.min_sold)  <span class="hljs-keyword">AND</span> emp.employee_id = emp2.employee_id<span class="hljs-keyword">ORDER</span> <span class="hljs-keyword">BY</span> years;</code></pre></div><p>최소매출액을 조회하게 하려면 <code>MIN</code> 함수를 이용해주면 된다. <code>sale</code> 쿼리에서 매출의 총 합계인 <code>amount_sold</code>에 <code>MIN</code>을 적용해 준뒤 마지막 부분의 <code>조인 조건</code>에서 <code>emp</code> 서브 쿼리의 <code>amount_sold</code>와 연결 시켜주면 된다.</p><h1 id="7장"><a href="#7장" class="headerlink" title="7장"></a>7장</h1><h2 id="1번-1"><a href="#1번-1" class="headerlink" title="1번"></a>1번</h2><p>문제 :<br>계층형 쿼리 응용편에서 LISTAGG 함수를 사용해 다음과 같이 ROW를 COlUMN으로 분리했다.</p><div class="hljs code-wrapper"><pre><code class="hljs n1ql"><span class="hljs-keyword">SELECT</span> department_id, LISTAGG(emp_name, <span class="hljs-string">&#x27;,&#x27;</span>) <span class="hljs-keyword">WITHIN</span> <span class="hljs-keyword">GROUP</span> (<span class="hljs-keyword">ORDER</span> <span class="hljs-keyword">BY</span> emp_name) <span class="hljs-keyword">as</span> empnames      <span class="hljs-keyword">FROM</span> employees     <span class="hljs-keyword">WHERE</span> department_id <span class="hljs-keyword">IS</span> <span class="hljs-keyword">NOT</span> <span class="hljs-literal">NULL</span>     <span class="hljs-keyword">GROUP</span> <span class="hljs-keyword">BY</span> department_id;</code></pre></div><p>LISTAGG 함수 대신 계층형 쿼리, 분석 함수를 사용해서 위 쿼리와 동일한 결과를 산출하는 쿼리를 작성해 보자.</p><p>답:</p><div class="hljs code-wrapper"><pre><code class="hljs pgsql"><span class="hljs-keyword">SELECT</span> department_id,        SUBSTR(SYS_CONNECT_BY_PATH(emp_name, <span class="hljs-string">&#x27;,&#x27;</span>),<span class="hljs-number">2</span>) empnames <span class="hljs-comment">-- 어떤 경로가 찍혀서, 2칸이 잘리는건지?</span> <span class="hljs-keyword">FROM</span> ( <span class="hljs-keyword">SELECT</span> emp_name,                department_id,                COUNT(*) <span class="hljs-keyword">OVER</span> ( <span class="hljs-keyword">partition</span> <span class="hljs-keyword">BY</span> department_id ) cnt,                ROW_NUMBER () <span class="hljs-keyword">OVER</span> ( <span class="hljs-keyword">partition</span> <span class="hljs-keyword">BY</span> department_id <span class="hljs-keyword">order</span> <span class="hljs-keyword">BY</span> emp_name) rowseq           <span class="hljs-keyword">FROM</span> employees         <span class="hljs-keyword">WHERE</span> department_id <span class="hljs-keyword">IS</span> <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span>)  <span class="hljs-keyword">WHERE</span> rowseq = cnt  <span class="hljs-keyword">START</span> <span class="hljs-keyword">WITH</span> rowseq = <span class="hljs-number">1</span> <span class="hljs-keyword">CONNECT</span> <span class="hljs-keyword">BY</span> PRIOR rowseq + <span class="hljs-number">1</span> = rowseq     <span class="hljs-keyword">AND</span> PRIOR department_id = department_id;</code></pre></div><h2 id="2번-1"><a href="#2번-1" class="headerlink" title="2번"></a>2번</h2><p>문제:<br>다음 쿼리는 사원 테이블에서 JOB_ID가 <code>SH_CLERK</code>인 사원을 조회하는 쿼리이다.</p><div class="hljs code-wrapper"><pre><code class="hljs n1ql"><span class="hljs-keyword">SELECT</span> employee_id, emp_name, hire_date<span class="hljs-keyword">FROM</span> employees<span class="hljs-keyword">WHERE</span> job_id = <span class="hljs-string">&#x27;SH_CLERK&#x27;</span><span class="hljs-keyword">ORDER</span> <span class="hljs-keyword">By</span> hire_date;</code></pre></div><p>사원 테이블에서 퇴사일자(retire_date)는 모두 비어 있는데, 위 결과에서 사원번호가 184번인 사원의 퇴사일자는 다음으로 입사일자가 빠른 192번 사원의 입사일자라고 가정해서 다음과 같은 형태로 결과를 추출하도록 쿼리를 작성해 보자(입사일자가 가장 최근인 183번 사원의 퇴사일자는 NULL이다).<br>답 :</p><div class="hljs code-wrapper"><pre><code class="hljs pgsql"><span class="hljs-keyword">SELECT</span> employee_id, emp_name, hire_date,LEAD(hire_date, <span class="hljs-number">1</span>, <span class="hljs-keyword">null</span>) <span class="hljs-keyword">OVER</span> (<span class="hljs-keyword">ORDER</span> <span class="hljs-keyword">BY</span> hire_date) <span class="hljs-keyword">AS</span> Retire_DATE<span class="hljs-keyword">FROM</span> employees<span class="hljs-keyword">WHERE</span> job_id = <span class="hljs-string">&#x27;SH_CLERK&#x27;</span><span class="hljs-keyword">ORDER</span> <span class="hljs-keyword">BY</span> hire_date;</code></pre></div><p><code>LEAD</code>는 다른 ROW의 값을 참조할 때 사용하는 함수로,<br>뒤에 있는 ROW의 값을 참조할 때 사용한다.<br><code>LEAD</code>를 이용하여 한 칸 뒤에 있는 입사 날짜를 참조하여 퇴사 날짜를 만들었다.</p><h2 id="3번-1"><a href="#3번-1" class="headerlink" title="3번"></a>3번</h2><p>질문 :<br>sales 테이블에는 판매 데이터, customers 테이블에는 고객정보가 있다. 2001년 12월(SALES_MONTH &#x3D; ‘200112’) 판매 데이터 중 현재일자를 기준으로 고객의 나이(customers.cust_year_of_birth)를 계산해서 다음과 같이 연령대별 매출금액을 보여주는 쿼리를 작성해 보자.</p><p>답 :</p><div class="hljs code-wrapper"><pre><code class="hljs pgsql"><span class="hljs-keyword">WITH</span> basis <span class="hljs-keyword">AS</span> ( <span class="hljs-keyword">SELECT</span> WIDTH_BUCKET(to_char(sysdate, <span class="hljs-string">&#x27;yyyy&#x27;</span>) - b.cust_year_of_birth, <span class="hljs-number">10</span>, <span class="hljs-number">90</span>, <span class="hljs-number">8</span>) <span class="hljs-keyword">AS</span> old_seg, s.amount_sold   <span class="hljs-keyword">FROM</span> sales s,         customers b   <span class="hljs-keyword">WHERE</span> s.sales_month = <span class="hljs-string">&#x27;200112&#x27;</span>   <span class="hljs-keyword">AND</span> s.cust_id = b.CUST_ID    ), real_data <span class="hljs-keyword">AS</span> ( <span class="hljs-keyword">SELECT</span> old_seg * <span class="hljs-number">10</span> || <span class="hljs-string">&#x27;대&#x27;</span> <span class="hljs-keyword">AS</span>              old_segment,  SUM(amount_sold) <span class="hljs-keyword">as</span> old_seg_amt              <span class="hljs-keyword">FROM</span> basis <span class="hljs-keyword">GROUP</span> <span class="hljs-keyword">BY</span> old_seg              ) <span class="hljs-keyword">SELECT</span> * <span class="hljs-keyword">FROM</span> real_data <span class="hljs-keyword">ORDER</span> <span class="hljs-keyword">BY</span> old_segment;</code></pre></div><p><code>sysdate</code>를 <code>to_char</code>를 이용해 문자열 타입으로 전환한 다음,  <code>cust_year_of_birth</code>를 <code>sysdate</code>에서 빼주어서<br>현재 나이를 계산해준다음<code>WIDTH_BUCKET</code>으로 나이대를 나눈 것을 <code>old_seg</code>로 이름 붙인다.  2001년 12월의 판매 데이터로 조건을 걸어준다.</p><p>그 다음 <code>old_seg</code>와 <code>amount_sold</code>를 이용해서 매출금액을 표현해준다.</p><h2 id="4번-1"><a href="#4번-1" class="headerlink" title="4번"></a>4번</h2><div class="hljs code-wrapper"><pre><code class="hljs pgsql"><span class="hljs-keyword">WITH</span> basis <span class="hljs-keyword">AS</span> ( <span class="hljs-keyword">SELECT</span> c.country_region, s.sales_month, SUM(s.amount_solD) <span class="hljs-keyword">AS</span> amt                  <span class="hljs-keyword">FROM</span> sales s,                        customers b,                       countries c                 <span class="hljs-keyword">WHERE</span> s.cust_id = b.CUST_ID                   <span class="hljs-keyword">AND</span> b.COUNTRY_ID = c.COUNTRY_ID                 <span class="hljs-keyword">GROUP</span> <span class="hljs-keyword">BY</span> c.country_region, s.sales_month              ),     real_data <span class="hljs-keyword">AS</span> ( <span class="hljs-keyword">SELECT</span> sales_month,                            country_region,                           amt,                           RANK() <span class="hljs-keyword">OVER</span> ( <span class="hljs-keyword">PARTITION</span> <span class="hljs-keyword">BY</span> sales_month <span class="hljs-keyword">ORDER</span> <span class="hljs-keyword">BY</span> amt ) ranks                      <span class="hljs-keyword">FROM</span> basis                   ) <span class="hljs-keyword">select</span> * <span class="hljs-keyword">from</span> real_data <span class="hljs-keyword">where</span> ranks = <span class="hljs-number">1</span>;</code></pre></div><h2 id="5번-1"><a href="#5번-1" class="headerlink" title="5번"></a>5번</h2><div class="hljs code-wrapper"><pre><code class="hljs pgsql"><span class="hljs-keyword">WITH</span> basis <span class="hljs-keyword">AS</span> (<span class="hljs-keyword">SELECT</span> REGION, GUBUN,       SUM(AMT1) <span class="hljs-keyword">AS</span> AMT1,        SUM(AMT2) <span class="hljs-keyword">AS</span> AMT2,        SUM(AMT3) <span class="hljs-keyword">AS</span> AMT3,        SUM(AMT4) <span class="hljs-keyword">AS</span> AMT4,        SUM(AMT5) <span class="hljs-keyword">AS</span> AMT5,        SUM(AMT6) <span class="hljs-keyword">AS</span> AMT6,        SUM(AMT6) <span class="hljs-keyword">AS</span> AMT7   <span class="hljs-keyword">FROM</span> (          <span class="hljs-keyword">SELECT</span> REGION,                GUBUN,                <span class="hljs-keyword">CASE</span> <span class="hljs-keyword">WHEN</span> PERIOD = <span class="hljs-string">&#x27;201111&#x27;</span> <span class="hljs-keyword">THEN</span> LOAN_JAN_AMT <span class="hljs-keyword">ELSE</span> <span class="hljs-number">0</span> <span class="hljs-keyword">END</span> AMT1,                <span class="hljs-keyword">CASE</span> <span class="hljs-keyword">WHEN</span> PERIOD = <span class="hljs-string">&#x27;201112&#x27;</span> <span class="hljs-keyword">THEN</span> LOAN_JAN_AMT <span class="hljs-keyword">ELSE</span> <span class="hljs-number">0</span> <span class="hljs-keyword">END</span> AMT2,                <span class="hljs-keyword">CASE</span> <span class="hljs-keyword">WHEN</span> PERIOD = <span class="hljs-string">&#x27;201210&#x27;</span> <span class="hljs-keyword">THEN</span> LOAN_JAN_AMT <span class="hljs-keyword">ELSE</span> <span class="hljs-number">0</span> <span class="hljs-keyword">END</span> AMT3,                 <span class="hljs-keyword">CASE</span> <span class="hljs-keyword">WHEN</span> PERIOD = <span class="hljs-string">&#x27;201211&#x27;</span> <span class="hljs-keyword">THEN</span> LOAN_JAN_AMT <span class="hljs-keyword">ELSE</span> <span class="hljs-number">0</span> <span class="hljs-keyword">END</span> AMT4,                 <span class="hljs-keyword">CASE</span> <span class="hljs-keyword">WHEN</span> PERIOD = <span class="hljs-string">&#x27;201212&#x27;</span> <span class="hljs-keyword">THEN</span> LOAN_JAN_AMT <span class="hljs-keyword">ELSE</span> <span class="hljs-number">0</span> <span class="hljs-keyword">END</span> AMT5,                 <span class="hljs-keyword">CASE</span> <span class="hljs-keyword">WHEN</span> PERIOD = <span class="hljs-string">&#x27;201310&#x27;</span> <span class="hljs-keyword">THEN</span> LOAN_JAN_AMT <span class="hljs-keyword">ELSE</span> <span class="hljs-number">0</span> <span class="hljs-keyword">END</span> AMT6,                <span class="hljs-keyword">CASE</span> <span class="hljs-keyword">WHEN</span> PERIOD = <span class="hljs-string">&#x27;201311&#x27;</span> <span class="hljs-keyword">THEN</span> LOAN_JAN_AMT <span class="hljs-keyword">ELSE</span> <span class="hljs-number">0</span> <span class="hljs-keyword">END</span> AMT7         <span class="hljs-keyword">FROM</span> KOR_LOAN_STATUS       )<span class="hljs-keyword">GROUP</span> <span class="hljs-keyword">BY</span> REGION, GUBUN)   <span class="hljs-keyword">SELECT</span> REGION,        GUBUN,       AMT1 || <span class="hljs-string">&#x27;( &#x27;</span> || ROUND(RATIO_TO_REPORT(amt1) <span class="hljs-keyword">OVER</span> ( <span class="hljs-keyword">PARTITION</span> <span class="hljs-keyword">BY</span> REGION ),<span class="hljs-number">2</span>) * <span class="hljs-number">100</span> || <span class="hljs-string">&#x27;% )&#x27;</span> <span class="hljs-keyword">AS</span> &quot;201111&quot;,       AMT2 || <span class="hljs-string">&#x27;( &#x27;</span> || ROUND(RATIO_TO_REPORT(amt2) <span class="hljs-keyword">OVER</span> ( <span class="hljs-keyword">PARTITION</span> <span class="hljs-keyword">BY</span> REGION ),<span class="hljs-number">2</span>) * <span class="hljs-number">100</span> || <span class="hljs-string">&#x27;% )&#x27;</span> <span class="hljs-keyword">AS</span> &quot;201112&quot;,       AMT3 || <span class="hljs-string">&#x27;( &#x27;</span> || ROUND(RATIO_TO_REPORT(amt3) <span class="hljs-keyword">OVER</span> ( <span class="hljs-keyword">PARTITION</span> <span class="hljs-keyword">BY</span> REGION ),<span class="hljs-number">2</span>) * <span class="hljs-number">100</span> || <span class="hljs-string">&#x27;% )&#x27;</span> <span class="hljs-keyword">AS</span> &quot;201210&quot;,       AMT4 || <span class="hljs-string">&#x27;( &#x27;</span> || ROUND(RATIO_TO_REPORT(amt4) <span class="hljs-keyword">OVER</span> ( <span class="hljs-keyword">PARTITION</span> <span class="hljs-keyword">BY</span> REGION ),<span class="hljs-number">2</span>) * <span class="hljs-number">100</span> || <span class="hljs-string">&#x27;% )&#x27;</span> <span class="hljs-keyword">AS</span> &quot;201211&quot;,       AMT5 || <span class="hljs-string">&#x27;( &#x27;</span> || ROUND(RATIO_TO_REPORT(amt5) <span class="hljs-keyword">OVER</span> ( <span class="hljs-keyword">PARTITION</span> <span class="hljs-keyword">BY</span> REGION ),<span class="hljs-number">2</span>) * <span class="hljs-number">100</span> || <span class="hljs-string">&#x27;% )&#x27;</span> <span class="hljs-keyword">AS</span> &quot;201212&quot;,       AMT6 || <span class="hljs-string">&#x27;( &#x27;</span> || ROUND(RATIO_TO_REPORT(amt6) <span class="hljs-keyword">OVER</span> ( <span class="hljs-keyword">PARTITION</span> <span class="hljs-keyword">BY</span> REGION ),<span class="hljs-number">2</span>) * <span class="hljs-number">100</span> || <span class="hljs-string">&#x27;% )&#x27;</span> <span class="hljs-keyword">AS</span> &quot;201310&quot;,       AMT7 || <span class="hljs-string">&#x27;( &#x27;</span> || ROUND(RATIO_TO_REPORT(amt7) <span class="hljs-keyword">OVER</span> ( <span class="hljs-keyword">PARTITION</span> <span class="hljs-keyword">BY</span> REGION ),<span class="hljs-number">2</span>) * <span class="hljs-number">100</span> || <span class="hljs-string">&#x27;% )&#x27;</span> <span class="hljs-keyword">AS</span> &quot;201311&quot;<span class="hljs-keyword">FROM</span> basis<span class="hljs-keyword">ORDER</span> <span class="hljs-keyword">BY</span> REGION;</code></pre></div>]]></content>
    
    
    <categories>
      
      <category>Oracle</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Oracle</tag>
      
      <tag>test</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Oracle 함수</title>
    <link href="/2022/04/27/Oracle%20%ED%95%A8%EC%88%98/"/>
    <url>/2022/04/27/Oracle%20%ED%95%A8%EC%88%98/</url>
    
    <content type="html"><![CDATA[<h1 id="함수"><a href="#함수" class="headerlink" title="함수"></a>함수</h1><p>함수는 연산 대상과 특성에 따라 숫자 함수, 문자 함수, 날짜 함수, NULL 관련 함수, 변환 함수로 나눌 수 있다.</p><h1 id="숫자-함수"><a href="#숫자-함수" class="headerlink" title="숫자 함수"></a>숫자 함수</h1><h2 id="ABS"><a href="#ABS" class="headerlink" title="ABS"></a>ABS</h2><p><code>ABS</code>는 절대값을 반환하는 함수이다.<br><code>ABS(n)</code> 의 형태로 사용한다.</p><div class="hljs code-wrapper"><pre><code class="hljs scss">SELECT <span class="hljs-built_in">ABS</span>(<span class="hljs-number">10</span>)      , <span class="hljs-built_in">ABS</span>(-<span class="hljs-number">10</span>)     , <span class="hljs-built_in">ABS</span>(-<span class="hljs-number">10.123</span>)     FROM DUAL;</code></pre></div><p>10 &#x2F; 10 &#x2F; 10.123 이 반환되었다.</p><h2 id="CEIL"><a href="#CEIL" class="headerlink" title="CEIL"></a>CEIL</h2><p><code>CEIL</code>은 올림한 결과를 반환한다.<br><code>CEIL(n)</code>의 형태로 사용한다.</p><div class="hljs code-wrapper"><pre><code class="hljs scss">SELECT <span class="hljs-built_in">CEIL</span>(<span class="hljs-number">10.123</span>)      , <span class="hljs-built_in">CEIL</span>(<span class="hljs-number">10.541</span>)     , <span class="hljs-built_in">CEIL</span>(<span class="hljs-number">11.001</span>)     FROM DUAL;</code></pre></div><p> 11 &#x2F; 11 &#x2F; 12가 반환되었다.</p><h2 id="FLOOR"><a href="#FLOOR" class="headerlink" title="FLOOR"></a>FLOOR</h2><p><code>FLOOR</code>은 버림한 결과를 반환한다.<br><code>FLOOR(n)</code>의 형태로 사용한다.</p><div class="hljs code-wrapper"><pre><code class="hljs scss">SELECT <span class="hljs-built_in">FLOOR</span>(<span class="hljs-number">10.123</span>)      ,<span class="hljs-built_in">FLOOR</span>(<span class="hljs-number">10.541</span>)      ,<span class="hljs-built_in">FLOOR</span>(<span class="hljs-number">11.001</span>)      FROM DUAL;</code></pre></div><p>10 &#x2F; 10 &#x2F; 11이 반환되었다.</p><h2 id="ROUND"><a href="#ROUND" class="headerlink" title="ROUND"></a>ROUND</h2><p><code>ROUND</code>는 반올림한 결과를 반환한다.<br><code>ROUND(n,i)</code>로 사용하며, <code>i</code>를 통해 반올림 할 자릿수의 지정이 가능하다.</p><div class="hljs code-wrapper"><pre><code class="hljs scss">SELECT <span class="hljs-built_in">ROUND</span>(<span class="hljs-number">10.154</span>)             ,<span class="hljs-built_in">ROUND</span>(<span class="hljs-number">10.541</span>)             ,<span class="hljs-built_in">ROUND</span>(<span class="hljs-number">11.001</span>)             ,<span class="hljs-built_in">ROUND</span>(<span class="hljs-number">10.154</span>, <span class="hljs-number">1</span>)             ,<span class="hljs-built_in">ROUND</span>(<span class="hljs-number">10.154</span>, <span class="hljs-number">2</span>)             ,<span class="hljs-built_in">ROUND</span>(<span class="hljs-number">10.154</span>, <span class="hljs-number">3</span>)             FROM DUAL;</code></pre></div><p>10 &#x2F; 11&#x2F; 11 &#x2F; 10.2 &#x2F; 10.15 &#x2F; 10.154 가 출력되었다.</p><div class="hljs code-wrapper"><pre><code class="hljs scss">SELECT <span class="hljs-built_in">ROUND</span>(<span class="hljs-number">0</span>, <span class="hljs-number">3</span>)      ,<span class="hljs-built_in">ROUND</span>(<span class="hljs-number">115.155</span>, -<span class="hljs-number">1</span>)      ,<span class="hljs-built_in">ROUND</span>(<span class="hljs-number">115.155</span>, -<span class="hljs-number">2</span>)      FROM DUAL;</code></pre></div><p>반올림할 자릿수를 음수로 지정하면 자릿수를 왼쪽부터 카운팅한다.<br>0 &#x2F; 120 &#x2F; 100이 출력되었다.</p><h2 id="TRUNC"><a href="#TRUNC" class="headerlink" title="TRUNC"></a>TRUNC</h2><p><code>TRUNC</code>는 반올림을 하지 않고 자릿수를 잘라낸 뒤 반환한다.<br><code>TRUNC(n,i)</code>로 사용하며, <code>i</code>에 자릿수를 지정하면 그 자릿수에서 잘라낸 결과를 반환한다. </p><div class="hljs code-wrapper"><pre><code class="hljs scss">SELECT <span class="hljs-built_in">TRUNC</span>(<span class="hljs-number">115.155</span>)      ,<span class="hljs-built_in">TRUNC</span>(<span class="hljs-number">115.155</span>, <span class="hljs-number">1</span>)      ,<span class="hljs-built_in">TRUNC</span>(<span class="hljs-number">115.155</span>, <span class="hljs-number">2</span>)      ,<span class="hljs-built_in">TRUNC</span>(<span class="hljs-number">115.155</span>, -<span class="hljs-number">2</span>)FROM DUAL;</code></pre></div><p>115 &#x2F; 115.1 &#x2F; 115.15 &#x2F; 100 이 반환되었다.</p><h2 id="POWER"><a href="#POWER" class="headerlink" title="POWER"></a>POWER</h2><p><code>POWER</code>는 n1을 n2 제곱한 결과를 반환한다.<br>n1이 음수 일때 n2는 정수만 올 수 있다.<br><code>POWER(n1,n2)</code>로 사용한다.</p><div class="hljs code-wrapper"><pre><code class="hljs apache"><span class="hljs-attribute">SELECT</span> POWER(<span class="hljs-number">2</span>,<span class="hljs-number">3</span>), POWER(<span class="hljs-number">3</span>,<span class="hljs-number">3</span>) <span class="hljs-attribute">FROM</span> DUAL;</code></pre></div><p> 8 &#x2F; 27이 반환되었다.<br> <div class="hljs code-wrapper"><pre><code class="hljs apache"><span class="hljs-attribute">SELECT</span> POWER(-<span class="hljs-number">3</span>, <span class="hljs-number">3</span>.<span class="hljs-number">0001</span>) <span class="hljs-attribute">FROM</span> DUAL;</code></pre></div><br> <img src="https://user-images.githubusercontent.com/65166786/165432532-5048ecde-297f-4dba-9813-65da9cc215bb.png"><br>n1이 음수일 때 n2를 정수가 아닌 실수로 할 경우<br>“인수가 범위를 벗어났습니다” 라는 에러가 발생한다.</p><h2 id="SQRT"><a href="#SQRT" class="headerlink" title="SQRT"></a>SQRT</h2><p><code>SQRT</code>는 n의 제곱근을 반환한다.<br><code>SQRT(n)</code>으로 사용한다.</p><div class="hljs code-wrapper"><pre><code class="hljs n1ql"><span class="hljs-keyword">SELECT</span> <span class="hljs-built_in">SQRT</span>(<span class="hljs-number">2</span>), <span class="hljs-built_in">SQRT</span>(<span class="hljs-number">5</span>) <span class="hljs-keyword">FROM</span> DUAL;</code></pre></div><p>1.73205 &#x2F; 2.64575 이 반환되었다.</p><h2 id="MOD"><a href="#MOD" class="headerlink" title="MOD"></a>MOD</h2><p><code>MOD</code>는 n1을 n2로 나눈 나머지 값을 반환한다.<br><code>MOD(n1,n2)</code>로 사용한다.</p><div class="hljs code-wrapper"><pre><code class="hljs apache"><span class="hljs-attribute">SELECT</span> MOD(<span class="hljs-number">17</span>,<span class="hljs-number">3</span>), MOD(<span class="hljs-number">21</span>.<span class="hljs-number">123</span>, <span class="hljs-number">5</span>.<span class="hljs-number">2</span>) <span class="hljs-attribute">FROM</span> DUAL;</code></pre></div><p> 2 &#x2F; 0.323 이 반환되었다.</p><h2 id="REMAINDER"><a href="#REMAINDER" class="headerlink" title="REMAINDER"></a>REMAINDER</h2><p><code>REMAINDER</code> 또한 나머지 값을 반환한다.<br><code>MOD</code>와는 차이점이 있다.<br><code>REMAINDER(n1,n2)</code>로 사용한다.</p><p> <code>MOD</code>의 경우 n1 - n2 * FLOOR(n1&#x2F;n2)로 <code>n1/n2</code>에 대해 버림을 시행하지만,<br><code>REMAINDER</code>의 경우 n1 - n2 * ROUND(n1&#x2F;n2)로 <code>n1/n2</code>에 대해 반올림을 시행하는 차이점이 있다.<br>  <div class="hljs code-wrapper"><pre><code class="hljs apache"><span class="hljs-attribute">SELECT</span> REMAINDER(<span class="hljs-number">17</span>,<span class="hljs-number">3</span>), REMAINDER(<span class="hljs-number">19</span>.<span class="hljs-number">123</span>, <span class="hljs-number">4</span>.<span class="hljs-number">2</span>)<span class="hljs-attribute">FROM</span> DUAL;</code></pre></div><br> 값이 반올림되어 -1 &#x2F; 0.323이 반환되었다.</p><h1 id="문자-함수"><a href="#문자-함수" class="headerlink" title="문자 함수"></a>문자 함수</h1><h2 id="INITCAP"><a href="#INITCAP" class="headerlink" title="INITCAP"></a>INITCAP</h2><p><code>INITCAP</code>는 문자의 첫 문자는 대문자, 나머지는 소문자로 반환하는 함수이다. 첫 문자의 기준은 공백이나 알파벳이 아닌 문자이다.<br><code>INITCAP(char)</code>로 사용한다.</p><div class="hljs code-wrapper"><pre><code class="hljs reasonml">SELECT <span class="hljs-constructor">INITCAP(&#x27;<span class="hljs-params">good</span> <span class="hljs-params">moring</span> <span class="hljs-params">today</span>&#x27;)</span>, <span class="hljs-constructor">INITCAP(&#x27;<span class="hljs-params">good</span>뷁<span class="hljs-params">moring</span><span class="hljs-operator">*</span><span class="hljs-params">today</span>&#x27;)</span> FROM DUAL;</code></pre></div><p> <img src="https://user-images.githubusercontent.com/65166786/165435002-d7fbe300-e17d-4c2d-b127-411ad3b8986c.png"><br> 왼쪽 출력을 보면 공백을 기준으로 <code>G``M``T</code>가 대문자로 변경된 것을 확인 할 수가 있고, 오른쪽 출력을 보면 한글 <code>뷁</code>과 <code>*</code>을 기준으로 대문자로 변경된 것을 확인 할 수 있다.</p><h2 id="LOWER-amp-UPPER"><a href="#LOWER-amp-UPPER" class="headerlink" title="LOWER &amp; UPPER"></a>LOWER &amp; UPPER</h2><p><code>LOWER</code>는 문자를 모두 소문자로, <code>UPPER</code>는 문자를 모두 대문자로 변환한다.<br><code>LOWER(char), UPPER(char)</code>로 사용한다.</p><div class="hljs code-wrapper"><pre><code class="hljs n1ql"><span class="hljs-keyword">SELECT</span> <span class="hljs-built_in">LOWER</span>(<span class="hljs-string">&#x27;GOOD MORING TODAY&#x27;</span>), <span class="hljs-built_in">UPPER</span>(<span class="hljs-string">&#x27;good moring today&#x27;</span>) <span class="hljs-keyword">FROM</span> DUAL;</code></pre></div><p><img src="https://user-images.githubusercontent.com/65166786/165435910-276955af-4678-459a-9833-63bc252027e1.png"><br>왼쪽 출력을 보면 모두 소문자로 변환된 것을 확인 할 수 있고, 오른쪽 출력을 보면 대문자로 변환된 것도 확인 할 수 있다.</p><h2 id="CONCAT"><a href="#CONCAT" class="headerlink" title="CONCAT"></a>CONCAT</h2><p><code>CONCAT</code>은 두 문자를 붙여서 반환한다.<br><code>CONCAT(char1, char2)</code>로 사용한다.</p><div class="hljs code-wrapper"><pre><code class="hljs oxygene"><span class="hljs-keyword">SELECT</span> <span class="hljs-keyword">CONCAT</span>(<span class="hljs-string">&#x27;I Want&#x27;</span>, <span class="hljs-string">&#x27; Go Home&#x27;</span>), <span class="hljs-string">&#x27;I Want&#x27;</span> || <span class="hljs-string">&#x27; Go Home&#x27;</span> <span class="hljs-keyword">FROM</span> DUAL<span class="hljs-punctuation">;</span></code></pre></div><p><img src="https://user-images.githubusercontent.com/65166786/165436028-0db99d38-cafa-44b0-ab67-c9c5729294ef.png"><br>문자 연산자인 <code>||</code>과 동일한 역할을 한다는 것을 알 수 있다. </p><h2 id="SUBSTR-amp-SUBSTRB"><a href="#SUBSTR-amp-SUBSTRB" class="headerlink" title="SUBSTR &amp; SUBSTRB"></a>SUBSTR &amp; SUBSTRB</h2><p><code>SUBSTR</code>은 문자열의 <code>pos</code>번째 문자부터 <code>len</code>길이만큼 잘라낸 결과를 반환한다. <code>pos</code>값이 0일 경우 첫번째 문자를 가르키며 , 음수일 경우 문자열의 맨 끝부터 역순으로 카운팅한다. 또한 <code>len</code>값이 생략될 경우 <code>pos</code>번째부터 나머지 모든 문자를 반환한다.<br><code>SUBSTR(char, pos, len)</code>, <code>SUBSTRB(char, pos, len)</code>으로 사용한다. </p><div class="hljs code-wrapper"><pre><code class="hljs n1ql"><span class="hljs-keyword">SELECT</span> <span class="hljs-built_in">SUBSTR</span>(<span class="hljs-string">&#x27;ABCDEFG&#x27;</span>, <span class="hljs-number">1</span>, <span class="hljs-number">4</span>), <span class="hljs-built_in">SUBSTR</span>(<span class="hljs-string">&#x27;ABCDEFG&#x27;</span>, <span class="hljs-number">-1</span>, <span class="hljs-number">4</span>) <span class="hljs-keyword">FROM</span> DUAL;</code></pre></div><p><img src="https://user-images.githubusercontent.com/65166786/165444255-5c46995c-6a20-4899-abb9-8aead34b1db9.png"><br>왼쪽 출력을 보면 첫번째 문자(1)에서 길이 4까지 반환하기에 <code>ABCD</code>가 반환되었다.<br>오른쪽 출력을 보면 역순으로 뒤에서 첫번째 문자에서(-1) 길이 4를 반환하나, 문자가 하나밖에 없기에 <code>G</code>만 반환된다.</p><p><code>SUBSTR</code>은 문자의 개수로 문자열을 자르지만,<br><code>SUBSTRB</code>는 문자 개수가 아닌 문자열의 Byte를 기준으로<br>문자열을 잘라낸다.</p><div class="hljs code-wrapper"><pre><code class="hljs apache"><span class="hljs-attribute">SELECT</span> SUBSTRB (&#x27;ABCDEFG&#x27;, <span class="hljs-number">1</span>, <span class="hljs-number">4</span>), SUBSTRB(&#x27;가나다라마바사&#x27;, <span class="hljs-number">1</span>, <span class="hljs-number">4</span>) <span class="hljs-attribute">FROM</span> DUAL;</code></pre></div><p><img src="https://user-images.githubusercontent.com/65166786/165445328-484f45ea-7040-4288-b16d-14b0575aa6be.png"><br>왼쪽 출력을 보면 첫번째 문자(1)에서 4byte만 반환하기에 <code>ABCD</code>가 반환되었다.<br>오른쪽 출력을 보면 첫번째 문자(1)에서 4byte만 반환하기에 <code>가나</code>가 출력되어야 하지만(한글은 통상적으로 한 글자당 2byte이다.) Oracle 인코딩에 따라 한글 한 문자 당 3byte의 저장공간을 가지게 될수도 있다고 한다. 문자 하나당3byte의 저장공간을 가지게 되어서 <code>가</code>만 출력되었다.</p><h2 id="LTRIM-amp-RTRIM"><a href="#LTRIM-amp-RTRIM" class="headerlink" title="LTRIM &amp; RTRIM"></a>LTRIM &amp; RTRIM</h2><p><code>LTRIM</code>은 문자열에서 <code>set</code>로 지정된 문자열을 왼쪽 끝에서 제거한 후 나머지 문자열을 반환한다.<br><code>set</code>를 생략할 경우 기본값으로 공백 한 문자가 사용된다.<br><code>RTRIM</code>은 <code>LTRIM</code>과 반대로 오른쪽 끝에서 제거한 후 나머지 문자열을 반환한다.<br><code>LTRIM(char, set)</code> , <code>RTRIM(char, set)</code>으로 사용한다.</p><div class="hljs code-wrapper"><pre><code class="hljs n1ql"><span class="hljs-keyword">SELECT</span> <span class="hljs-built_in">LTRIM</span>(<span class="hljs-string">&#x27;QWERTYGOODQWERTY&#x27;</span>, <span class="hljs-string">&#x27;QWERTY&#x27;</span>)      ,<span class="hljs-built_in">LTRIM</span>(<span class="hljs-string">&#x27;기러기&#x27;</span>, <span class="hljs-string">&#x27;기&#x27;</span>)      ,<span class="hljs-built_in">RTRIM</span>(<span class="hljs-string">&#x27;QWERTYGOODQWERTY&#x27;</span>, <span class="hljs-string">&#x27;QWERTY&#x27;</span>)      ,<span class="hljs-built_in">RTRIM</span>(<span class="hljs-string">&#x27;기러기&#x27;</span>, <span class="hljs-string">&#x27;기&#x27;</span>) <span class="hljs-keyword">FROM</span> DUAL;</code></pre></div><p><img src="https://user-images.githubusercontent.com/65166786/165447162-b1a76df0-6c15-45d0-9aeb-eef07cb66eba.png"></p><h2 id="LPAD-amp-RPAD"><a href="#LPAD-amp-RPAD" class="headerlink" title="LPAD &amp; RPAD"></a>LPAD &amp; RPAD</h2><p><code>LPAD</code>,<code>RPAD</code>는 매개변수로 들어온 문자열을 n자리만큼 왼쪽&#x2F; 오른쪽부터 채운 후 반환한다.<br><code>LPAD(expr1,n,expr2)</code> , <code>RPAD(expr1,n,expr2)</code>로 사용한다.</p><div class="hljs code-wrapper"><pre><code class="hljs sql"><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> ex4_1 ( alpha VARCHAR2(<span class="hljs-number">30</span>));<span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> ex4_1 <span class="hljs-keyword">VALUES</span> (<span class="hljs-string">&#x27;ABC&#x27;</span>);<span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> ex4_1 <span class="hljs-keyword">VALUES</span> (<span class="hljs-string">&#x27;DEF&#x27;</span>);<span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> ex4_1 <span class="hljs-keyword">VALUES</span> (<span class="hljs-string">&#x27;GHI&#x27;</span>);</code></pre></div><div class="hljs code-wrapper"><pre><code class="hljs pgsql"><span class="hljs-keyword">SELECT</span> LPAD(alpha, <span class="hljs-number">7</span>, <span class="hljs-string">&#x27;Play&#x27;</span>) <span class="hljs-keyword">FROM</span> ex4_1;</code></pre></div><p><img src="https://user-images.githubusercontent.com/65166786/165467899-6d7f65a2-90f2-44f2-9bc9-17c14f90ef93.png"></p><div class="hljs code-wrapper"><pre><code class="hljs pgsql"><span class="hljs-keyword">SELECT</span> RPAD(alpha, <span class="hljs-number">7</span>, <span class="hljs-string">&#x27;Play&#x27;</span>) <span class="hljs-keyword">FROM</span> ex4_1;</code></pre></div><p><img src="https://user-images.githubusercontent.com/65166786/165467939-67118faa-ed3e-4b01-8e6c-64bf7d158d3e.png"></p><h2 id="REPLACE"><a href="#REPLACE" class="headerlink" title="REPLACE"></a>REPLACE</h2><p><code>REPLACE</code>는 <code>char</code>에서 <code>search_str</code>을 찾아 <code>replace_str</code>로 대체한 결과를 반환한다.<br><code>REPLACE(char,search_str,replace_str)</code>으로 사용한다.</p><div class="hljs code-wrapper"><pre><code class="hljs n1ql"><span class="hljs-keyword">SELECT</span> <span class="hljs-built_in">REPLACE</span> (<span class="hljs-string">&#x27;얼음 공주같은 눈빛은 말고 한번쯤은 웃어도봐요 오금저리고 얼어붙어&#x27;</span>, <span class="hljs-string">&#x27;얼음 공주&#x27;</span>, <span class="hljs-string">&#x27;당근 공주&#x27;</span>) <span class="hljs-keyword">FROM</span> DUAL;</code></pre></div><p><img src="https://user-images.githubusercontent.com/65166786/165470648-0d952325-e560-4a4f-8e75-106f36d83306.png"><br> <code>얼음 공주</code>가 <code>당근 공주</code>로 대체된 것을 확인 할 수 있다.</p><div class="hljs code-wrapper"><pre><code class="hljs n1ql"><span class="hljs-keyword">SELECT</span> <span class="hljs-built_in">LTRIM</span>(<span class="hljs-string">&#x27; ABC DEF &#x27;</span>)       ,<span class="hljs-built_in">RTRIM</span>(<span class="hljs-string">&#x27; ABC DEF &#x27;</span>)       ,<span class="hljs-built_in">REPLACE</span>(<span class="hljs-string">&#x27; ABC DEF &#x27;</span>, <span class="hljs-string">&#x27; &#x27;</span>, <span class="hljs-string">&#x27;&#x27;</span>) <span class="hljs-keyword">FROM</span> DUAL;</code></pre></div><p><img src="https://user-images.githubusercontent.com/65166786/165471158-4f2e4cd2-fd28-4f4a-8786-423c43b35da6.png"><br><code>LTRIM</code>, <code>RTRIM</code>의 경우 문자열 중간의 공백이 제거되지 않지만, <code>REPLACE</code>의 경우 문자열 중간의 공백도 제거된 채로 출력되는 것을 확인 할 수 있다.</p><h2 id="TRANSLATE"><a href="#TRANSLATE" class="headerlink" title="TRANSLATE"></a>TRANSLATE</h2><p><code>TRANSLATE</code>는 <code>expr</code>에서 <code>from_str</code>을 찾아 <code>to_str</code>로 대체한 결과를 반환한다.<br><code>TRANSLATE(expr,from_str,to_str)</code>으로 사용한다.</p><div class="hljs code-wrapper"><pre><code class="hljs pgsql"><span class="hljs-keyword">SELECT</span> REPLACE(<span class="hljs-string">&#x27;얼음 공주같은 눈빛은 말고 한번쯤은 웃어도봐요 오금저리고 얼어붙어&#x27;</span>, <span class="hljs-string">&#x27;얼음 공주&#x27;</span>, <span class="hljs-string">&#x27;당근 공주&#x27;</span>) <span class="hljs-keyword">AS</span> rep      ,TRANSLATE(<span class="hljs-string">&#x27;얼음 공주같은 눈빛은 말고 한번쯤은 웃어도봐요 오금저리고 얼어붙어&#x27;</span>, <span class="hljs-string">&#x27;얼음 공주&#x27;</span>, <span class="hljs-string">&#x27;당근 공주&#x27;</span>) <span class="hljs-keyword">AS</span> trn <span class="hljs-keyword">FROM</span> DUAL;</code></pre></div><p><img src="https://user-images.githubusercontent.com/65166786/165472988-152cfa62-e65f-47e6-97d9-7efb4d9ceb32.png"><br><code>REPLACE</code>의 경우 단어 단위로 바뀌지만, <code>TRANSLATE</code>는 한 글자씩 바뀌기에<br>오른쪽 출력을 보면 ‘얼어붙어’가 아닌 ‘당어붙어’가 된 것을 확인 할 수 있다.</p><h2 id="INSTR"><a href="#INSTR" class="headerlink" title="INSTR"></a>INSTR</h2><p><code>INSTR</code>은 str 문자열에서 substr과 일치하는 위치를 반환한다.<br><code>INSTR(str,substr,pos,occur)</code>으로 사용한다.<br><code>pos</code>는 시작위치이고, <code>occur</code>은 몇 번째 일치하는지를 명시한다.</p><div class="hljs code-wrapper"><pre><code class="hljs n1ql"><span class="hljs-keyword">SELECT</span> INSTR(<span class="hljs-string">&#x27;내가 만약 외로울 때면. 내가 만약 괴로울 때면. 내가 만약 즐거울때면&#x27;</span>, <span class="hljs-string">&#x27;만약&#x27;</span>) <span class="hljs-keyword">AS</span> INSTR1      ,INSTR(<span class="hljs-string">&#x27;내가 만약 외로울 때면. 내가 만약 괴로울 때면. 내가 만약 즐거울때면&#x27;</span>, <span class="hljs-string">&#x27;만약&#x27;</span>, <span class="hljs-number">5</span>) <span class="hljs-keyword">AS</span> INSTR2      ,INSTR(<span class="hljs-string">&#x27;내가 만약 외로울 때면. 내가 만약 괴로울 때면. 내가 만약 즐거울때면&#x27;</span>, <span class="hljs-string">&#x27;만약&#x27;</span>, <span class="hljs-number">5</span>, <span class="hljs-number">2</span>) <span class="hljs-keyword">AS</span> INSTR3 <span class="hljs-keyword">FROM</span> DUAL;</code></pre></div><p><img src="https://user-images.githubusercontent.com/65166786/165476835-486577c9-9d22-46e5-9679-c67fc9d2c133.png"><br>첫번째는 <code>pos</code>, <code>occur</code>둘 다 없으므로 기본값 1이 적용되어, 첫번째 만약이 있는 위치인 4가 반환되었다.<br>두번째는 <code>pos</code>에 5가 적용되어 5번째 글자부터 탐색하므로,<br>첫번째 만약을 건너뛴다. 그러므로 두번째 만약이 있는 위치인 18이 반환되었다.<br>세번째는 <code>pos</code>에 5, <code>occur</code>에 2를 적용했으므로 첫번째 만약을 건너뛰고, 두번째 만약도 건너뛴 세번째 만약의 위치인 32가 반환되었다.</p><h2 id="LENGTH-amp-LENGTHB"><a href="#LENGTH-amp-LENGTHB" class="headerlink" title="LENGTH &amp; LENGTHB"></a>LENGTH &amp; LENGTHB</h2><p><code>LENGTH</code>은 문자열의 개수를 반환한다.<br><code>LENGTHB</code>는 문자열의 바이트수를 반환한다.<br><code>LENGTH(chr)</code> , <code>LENGTHB(chr)</code>으로 사용한다.</p><div class="hljs code-wrapper"><pre><code class="hljs n1ql"><span class="hljs-keyword">SELECT</span> <span class="hljs-built_in">LENGTH</span>(<span class="hljs-string">&#x27;대한민국&#x27;</span>)      ,LENGTHB(<span class="hljs-string">&#x27;대한민국&#x27;</span>) <span class="hljs-keyword">FROM</span> DUAL;</code></pre></div><p> <img src="https://user-images.githubusercontent.com/65166786/165477950-8e44dffa-3a7f-4bc9-b30b-1d27bca721fe.png"><br> <code>LENGTH</code>에서 문자열의 개수 4가 반환되었고,<br> <code>LENGTHB</code>에서 문자열의 바이트 수 12가 반환된 것을 확인할 수 있다.</p><h1 id="날짜-함수"><a href="#날짜-함수" class="headerlink" title="날짜 함수"></a>날짜 함수</h1><p>날짜 함수는 날짜형을 대상으로 연산을 수행하는 함수이다.</p><h2 id="SYSDATE-SYSTIMESTAMP"><a href="#SYSDATE-SYSTIMESTAMP" class="headerlink" title="SYSDATE , SYSTIMESTAMP"></a>SYSDATE , SYSTIMESTAMP</h2><p><code>SYSDATE</code>, <code>SYSTIMESTAMP</code>는 현재일자와 시간을 각각 <code>DATE</code> <code>TIMESTAMP</code>형으로 반환한다.</p><div class="hljs code-wrapper"><pre><code class="hljs n1ql"><span class="hljs-keyword">SELECT</span> SYSDATE, SYSTIMESTAMP <span class="hljs-keyword">FROM</span> DUAL;</code></pre></div><p><img src="https://user-images.githubusercontent.com/65166786/165512183-fa129de6-8982-4030-bad8-749ee8234011.png"></p><h2 id="ADD-MONTHS"><a href="#ADD-MONTHS" class="headerlink" title="ADD_MONTHS"></a>ADD_MONTHS</h2><p><code>ADD_MONTHS</code>는 날짜에 <code>integer</code> 만큼의 월을 더한 뒤 반환한다.<br><code>ADD_MONTHS(date, integer)</code>으로 사용한다.</p><div class="hljs code-wrapper"><pre><code class="hljs scss">SELECT <span class="hljs-built_in">ADD_MONTHS</span>(SYSDATE, <span class="hljs-number">1</span>), <span class="hljs-built_in">ADD_MONTHS</span>(SYSDATE, -<span class="hljs-number">1</span>) FROM DUAL;</code></pre></div><p><img src="https://user-images.githubusercontent.com/65166786/165512266-809fa569-45f0-4079-844a-409be2833545.png"></p><h2 id="MONTHS-BETWEEN"><a href="#MONTHS-BETWEEN" class="headerlink" title="MONTHS_BETWEEN"></a>MONTHS_BETWEEN</h2><p><code>MONTHS_BETWEEN</code>는 두 날짜 사이의 개월 수를 반환한다.<br><code>MONTHS_BETWEEN(date1, date2)</code>로 사용하며, <code>date1</code>이 <code>date2</code>보다 빠른 날짜여야 한다.</p><div class="hljs code-wrapper"><pre><code class="hljs sas"><span class="hljs-keyword">SELECT</span> MONTHS_BETWEE<span class="hljs-meta">N</span>(SYSDATE, ADD_MONTHS(SYSDATE, 1)) mon1,       MONTHS_BETWEE<span class="hljs-meta">N</span>(ADD_MONTHS(SYSDATE, 1), SYSDATE) mon2 <span class="hljs-keyword">FROM</span> DUAL;</code></pre></div><p><img src="https://user-images.githubusercontent.com/65166786/165513978-1003fb14-b41a-4f74-8e1d-dfd449e60fd6.png"></p><h2 id="LAST-DAY"><a href="#LAST-DAY" class="headerlink" title="LAST_DAY"></a>LAST_DAY</h2><p><code>date</code> 날짜를 기준으로 해당 월을 마지막 일자를 반환한다.<br><code>LAST_DAY(date)</code>으로 사용한다.</p><div class="hljs code-wrapper"><pre><code class="hljs sas"><span class="hljs-keyword">SELECT</span> LAST_<span class="hljs-meta">DAY</span>(SYSDATE)      <span class="hljs-keyword">FROM</span> DUAL;</code></pre></div><p><img src="https://user-images.githubusercontent.com/65166786/165514793-1304a135-463a-4690-a522-9f8dfa031b71.png"></p><h2 id="ROUND-amp-TRUNC"><a href="#ROUND-amp-TRUNC" class="headerlink" title="ROUND &amp; TRUNC"></a>ROUND &amp; TRUNC</h2><p><code>ROUND</code>와 <code>TRUNC</code>는 숫자 함수이면서 날짜 함수로도 쓰인다. <code>ROUND</code>는 반올림 날짜를, <code>TRUNC</code>는 잘라낸 날짜를 반환한다.<br><code>ROUND(data,format)</code>, <code>TRUNC(data,format)</code>로 사용한다.<br><img src="https://user-images.githubusercontent.com/65166786/165520893-6f10d9ac-402d-4264-a120-9eba126e917f.png"></p><h2 id="NEXT-DAY"><a href="#NEXT-DAY" class="headerlink" title="NEXT_DAY"></a>NEXT_DAY</h2><p><code>data</code>를 <code>char</code>에 명시한 날짜로 다음주 주중 일자를 반환한다.<br><code>NEXT_DAY(char)</code>으로 사용한다.<br><code>char</code>에 오는 요일 값은 사용자 환경에 따라 한글이 될 수도 있고, 영어도 될 수도 있다.</p><div class="hljs code-wrapper"><pre><code class="hljs sas"><span class="hljs-keyword">SELECT</span> NEXT_<span class="hljs-meta">DAY</span>(SYSDATE, <span class="hljs-string">&#x27;금요일&#x27;</span>) <span class="hljs-keyword">FROM</span> DUAL;</code></pre></div><p><img src="https://user-images.githubusercontent.com/65166786/165521492-54c57b88-af70-4360-8690-fe3371480189.png"></p><h1 id="변환-함수"><a href="#변환-함수" class="headerlink" title="변환 함수"></a>변환 함수</h1><p>서로 다른 유형의 데이터 타입으로 변환해서 결과를 반환하는 함수이다.<br>변환 함수를 통해 형변환을 직접 처리하는 것을 <code>명시적 형변환</code>이라고 한다.<br>반대로 일정한 규칙에 따라 자동으로 형변환이 처리되는것은 <code>묵시적 형변환</code>이라고 한다.</p><ul><li>날짜 변환 형식</li></ul><table><thead><tr><th>포맷</th><th>설명</th><th>예시</th></tr></thead><tbody><tr><td>AM, A.M.</td><td>오전</td><td>TO_CHAR(SYSDATE, ‘AM’) → 오전</td></tr><tr><td>PM, P.M.</td><td>오후</td><td>TO_CHAR(SYSDATE, ‘PM’) → 오후</td></tr><tr><td>YYYY, YYY, YY, Y</td><td>연도</td><td>TO_CHAR(SYSDATE, ‘YYYY’) → 2014</td></tr><tr><td>MONTH, MON</td><td>월</td><td>TO_CHAR(SYSDATE, ‘MONTH’) → 2월</td></tr><tr><td>MM</td><td>01~12 형태의 월</td><td>TO_CHAR(SYSDATE, ‘MM’) → 02</td></tr><tr><td>D</td><td>주 중의 일을 1~7로</td><td>TO_CHAR(SYSDATE, ‘D’) → 2</td></tr><tr><td>DAY</td><td>주 중 일을 요일로 표시</td><td>TO_CHAR(SYSDATE, ‘DAY’) → 월요일</td></tr><tr><td>DD</td><td>일을 01~31 형태로 표시</td><td>TO_CHAR(SYSDATE, ‘DD’) → 01</td></tr><tr><td>DDD</td><td>일을 001~365 형태로</td><td>TO_CHAR(SYSDATE, ‘DDD’) → 041</td></tr><tr><td>DL</td><td>현재 날짜를 요일까지 표시</td><td>TO_CHAR(SYSDATE, ‘DL’) → 2014년 2월 10일 월요일</td></tr><tr><td>HH, HH12</td><td>시간을 01~12시 형태로</td><td>TO_CHAR(SYSDATE, ‘HH’) → 04</td></tr><tr><td>HH24</td><td>시간을 01~23시 형태로</td><td>TO_CHAR(SYSDATE, ‘HH24’) → 16</td></tr><tr><td>MI</td><td>분을 00~59분 형태로</td><td>TO_CHAR(SYSDATE, ‘MI’) → 56</td></tr><tr><td>SS</td><td>초를 00~59초 형태로</td><td>TO_CHAR(SYSDATE, ‘SS’) → 33</td></tr><tr><td>WW</td><td>주를 01~52주 형태로</td><td>TO_CHAR(SYSDATE, ‘WW’) → 06</td></tr></tbody></table><ul><li>숫자 변환 형식</li></ul><table><thead><tr><th>포맷</th><th>설명</th><th>예시</th></tr></thead><tbody><tr><td>,</td><td>콤마로 표시</td><td>TO_CHAR(123456, ‘999,999’) → 123,456</td></tr><tr><td>.</td><td>소수점 표시</td><td>TO_CHAR(123456.4, ‘999,999.9’) → 123,456.4</td></tr><tr><td>9</td><td>한 자리 숫자, 실제 값보다 크거나 같게 명시</td><td>TO_CHAR(123456, ‘999,999’) → 123,456</td></tr><tr><td>PR</td><td>음수일 때 &lt; &gt;로 표시</td><td>TO_CHAR(-123, ‘999PR’) → &lt;123&gt;</td></tr><tr><td>RN, rn</td><td>로마 숫자로 표시</td><td>TO_CHAR(123, ‘RN’)→CXXIII</td></tr><tr><td>S</td><td>양수이면 +, 음수이면 - 표시</td><td>TO_CHAR(123, ‘S999’) → +123</td></tr></tbody></table><h2 id="TO-CHAR"><a href="#TO-CHAR" class="headerlink" title="TO_CHAR"></a>TO_CHAR</h2><p>숫자나 날짜를 문자로 변환한다.<br><code>TO_CHAR(숫자 혹은 날짜, format) </code>으로 사용한다.</p><div class="hljs code-wrapper"><pre><code class="hljs apache"><span class="hljs-attribute">SELECT</span> TO_CHAR(<span class="hljs-number">123456789</span>, &#x27;<span class="hljs-number">999</span>,<span class="hljs-number">999</span>,<span class="hljs-number">999</span>&#x27;) <span class="hljs-attribute">FROM</span> DUAL;</code></pre></div><p><img src="https://user-images.githubusercontent.com/65166786/165528777-7db99cea-a14d-4cc8-a600-bd4eafe8e00c.png"></p><h2 id="TO-NUMBER"><a href="#TO-NUMBER" class="headerlink" title="TO_NUMBER"></a>TO_NUMBER</h2><p>문자나 다른 유형의 숫자를 <code>NUMBER</code> 형태로 변환한다.<br><code>TO_NUMBER(expr,format)</code>으로 사용한다.</p><div class="hljs code-wrapper"><pre><code class="hljs pgsql"><span class="hljs-keyword">SELECT</span> TO_NUMBER(<span class="hljs-string">&#x27;123456&#x27;</span>) <span class="hljs-keyword">FROM</span> DUAL;</code></pre></div><p><img src="https://user-images.githubusercontent.com/65166786/165530030-4d0fc429-ce40-4b33-877d-0df8e34f8881.png"></p><h2 id="TO-DATE-amp-TO-TIMESTAMP"><a href="#TO-DATE-amp-TO-TIMESTAMP" class="headerlink" title="TO_DATE &amp; TO_TIMESTAMP"></a>TO_DATE &amp; TO_TIMESTAMP</h2><p>문자를 날짜형으로 변환한다.<br><code>TO_DATE(char, format)</code> , <code>TO_TIMESTAMP(char, format)</code>으로 사용한다. </p><div class="hljs code-wrapper"><pre><code class="hljs pgsql"><span class="hljs-keyword">SELECT</span> TO_DATE(<span class="hljs-string">&#x27;20140101&#x27;</span>, <span class="hljs-string">&#x27;YYYY-MM-DD&#x27;</span>) <span class="hljs-keyword">FROM</span> DUAL;<span class="hljs-keyword">SELECT</span> TO_TIMESTAMP(<span class="hljs-string">&#x27;20140101 13:44:50&#x27;</span>, <span class="hljs-string">&#x27;YYYY-MM-DD HH24:MI:SS&#x27;</span>) <span class="hljs-keyword">FROM</span> DUAL;</code></pre></div><p><img src="https://user-images.githubusercontent.com/65166786/165532935-718227d3-6326-48c9-93fd-b3f05617a35d.png"><br><img src="https://user-images.githubusercontent.com/65166786/165532998-d7e2b0f6-7f6f-4678-ad6f-a4e405e9d68a.png"></p><p><code>TIMESTAMP</code>를 실행 했을 때 시간이 표시되지 않으면 실행한다.</p><div class="hljs code-wrapper"><pre><code class="hljs pgsql"><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">SESSION</span> <span class="hljs-keyword">SET</span> NLS_DATE_FORMAT = <span class="hljs-string">&#x27;YYYY-MM-DD HH24:MI:SS&#x27;</span>;</code></pre></div><h1 id="NULL-관련-함수"><a href="#NULL-관련-함수" class="headerlink" title="NULL 관련 함수"></a>NULL 관련 함수</h1><p>Oracle에서는 NULL을 연산 대상으로 처리할 수 있는 SQL 함수를 제공하고 있다.</p><h2 id="NVL-amp-NVL2"><a href="#NVL-amp-NVL2" class="headerlink" title="NVL &amp; NVL2"></a>NVL &amp; NVL2</h2><p><code>expr1</code>이 <code>NULL</code>일 때 <code>expr2</code>를 반환한다.<br><code>NVL(expr1,expr2)</code>으로 사용한다. </p><div class="hljs code-wrapper"><pre><code class="hljs n1ql"><span class="hljs-keyword">SELECT</span> NVL(manager_id, employee_id) <span class="hljs-keyword">FROM</span> employees<span class="hljs-keyword">WHERE</span> manager_id <span class="hljs-keyword">IS</span> <span class="hljs-literal">NULL</span>;</code></pre></div><p><code>NVL2</code>는 <code>NVL</code>의 업그레이드로 <code>NVL2(expr1, expr2, expr3 ...)</code>으로 사용한다.</p><div class="hljs code-wrapper"><pre><code class="hljs reasonml">SELECT employee_id     ,<span class="hljs-constructor">NVL2(<span class="hljs-params">commission_pct</span>, <span class="hljs-params">salary</span> +(<span class="hljs-params">salary</span> <span class="hljs-operator">*</span> <span class="hljs-params">commission_pct</span>)</span>, salary) AS salary2 FROM employees;</code></pre></div><h2 id="COALESCE"><a href="#COALESCE" class="headerlink" title="COALESCE"></a>COALESCE</h2><p><code>COALESCE</code>는 매개변수로 들어오는 표현식에서 NULL이 아닌 첫 번째 표현식을 반환한다.<br><code>COALESCE(expr1, expr2..)</code>의 형태로 사용한다.</p><div class="hljs code-wrapper"><pre><code class="hljs pgsql"><span class="hljs-keyword">SELECT</span> employee_id, salary, commission_pct       ,COALESCE(salary * commission_pct, salary) <span class="hljs-keyword">AS</span> salary2 <span class="hljs-keyword">FROM</span> employees;</code></pre></div><h2 id="LNNVL"><a href="#LNNVL" class="headerlink" title="LNNVL"></a>LNNVL</h2><p><code>LNNVL</code>은 매개변수로 들어오는 조건식의 결과가 FASLE나 UNKNOWN이면 TRUE를, TRUE이면 FALSE를 반환한다.<br><code>LNNVL(조건식)</code>의 형태로 사용한다.</p><div class="hljs code-wrapper"><pre><code class="hljs n1ql"><span class="hljs-keyword">SELECT</span> <span class="hljs-built_in">COUNT</span>(*) <span class="hljs-keyword">FROM</span> employees<span class="hljs-keyword">WHERE</span> LNNVL(commission_pct&gt;= <span class="hljs-number">0.2</span>);</code></pre></div><h2 id="NULLIF"><a href="#NULLIF" class="headerlink" title="NULLIF"></a>NULLIF</h2><p><code>NULLIF</code>는 <code>expr1</code>과 <code>expr2</code>를 비교해 같으면 <code>NULL</code>을 다르면 <code>expr1</code>을 반환한다.<br><code>NULLIF(expr1, expr2)</code>의 형태로 사용한다.</p><div class="hljs code-wrapper"><pre><code class="hljs pgsql"><span class="hljs-keyword">SELECT</span> employee_id    ,TO_CHAR(start_date, <span class="hljs-string">&#x27;YYYY&#x27;</span>) start_year      ,TO_CHAR(end_date, <span class="hljs-string">&#x27;YYYY&#x27;</span>) end_year      ,NULLIF(TO_CHAR(end_date, <span class="hljs-string">&#x27;YYYY&#x27;</span>), TO_CHAR(start_date, <span class="hljs-string">&#x27;YYYY&#x27;</span>) ) nullif_year <span class="hljs-keyword">FROM</span> job_history;</code></pre></div><h1 id="기타-함수"><a href="#기타-함수" class="headerlink" title="기타 함수"></a>기타 함수</h1><h2 id="GREATEST-amp-LEAST"><a href="#GREATEST-amp-LEAST" class="headerlink" title="GREATEST &amp; LEAST"></a>GREATEST &amp; LEAST</h2><p><code>GREATEST</code>는 매개변수로 들어오는 표현식에서 가장 큰 값을, <code>LEAST</code>는 가장 작은 값을 반환한다. 숫자뿐만 아니라 문자의 형태도 비교 가능하다.</p><div class="hljs code-wrapper"><pre><code class="hljs n1ql"><span class="hljs-keyword">SELECT</span> <span class="hljs-built_in">GREATEST</span>(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">2</span>)      ,<span class="hljs-built_in">LEAST</span>(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">2</span>)<span class="hljs-keyword">FROM</span> DUAL;</code></pre></div><h2 id="DECODE"><a href="#DECODE" class="headerlink" title="DECODE"></a>DECODE</h2><p><code>DECODE</code>는 <code>expr</code>과 <code>search1</code>을 비교해 두 값이 같으면 <code>result1</code>을 다르면 <code>search2</code>와 비교해서 <code>result2</code>를 이런식으로 비교하다가 최종적으로 같은 값이 없을 경우 <code>defalut</code> 값을 반환한다. if문 중 elif문을 생각하면 이해가 쉬울 듯 하다.<br><code>DECODE(expr, search1,result1,search2,result2....,default</code>)의 형태로 사용한다.</p><div class="hljs code-wrapper"><pre><code class="hljs pgsql"><span class="hljs-keyword">SELECT</span> prod_id      ,DECODE(channel_id, <span class="hljs-number">3</span>, <span class="hljs-string">&#x27;Direct&#x27;</span>,                          <span class="hljs-number">9</span>, <span class="hljs-string">&#x27;Direct&#x27;</span>,                          <span class="hljs-number">5</span>, <span class="hljs-string">&#x27;InDirect&#x27;</span>,                          <span class="hljs-number">4</span>, <span class="hljs-string">&#x27;InDirect&#x27;</span>,                             <span class="hljs-string">&#x27;Others&#x27;</span>) decodes <span class="hljs-keyword">FROM</span> sales<span class="hljs-keyword">WHERE</span> prod_id = <span class="hljs-number">125</span>;</code></pre></div><h1 id="기본-집계-함수"><a href="#기본-집계-함수" class="headerlink" title="기본 집계 함수"></a>기본 집계 함수</h1><p>대상 데이터를 특정 그룹으로 묶은 다음, 그룹에 대해 총합, 평균, 최댓값, 최솟값 등을 구하는 함수를 말한다.</p><h2 id="COUNT"><a href="#COUNT" class="headerlink" title="COUNT"></a>COUNT</h2><p>NULL 값을 제외한, 전체 ROW 수를 반환한다.<br><code>WHERE</code> 조건으로 걸러진 ROW수도 반환한다.<br><code>COUNT(expr)</code>로 사용한다.<br><code>COUNT(DISTINCT expr)</code>로 사용할 시 데이터내의 유일한 값만 반환한다.</p><div class="hljs code-wrapper"><pre><code class="hljs n1ql"><span class="hljs-keyword">SELECT</span> <span class="hljs-built_in">COUNT</span>(*) <span class="hljs-keyword">FROM</span> employees;</code></pre></div><div class="hljs code-wrapper"><pre><code class="hljs n1ql"><span class="hljs-keyword">SELECT</span> <span class="hljs-built_in">COUNT</span>(<span class="hljs-keyword">DISTINCT</span> department_id) <span class="hljs-keyword">FROM</span> employees;</code></pre></div><h2 id="SUM"><a href="#SUM" class="headerlink" title="SUM"></a>SUM</h2><p><code>SUM</code>은 전체 합계를 반환한다<br><code>SUM(expr)</code>으로 사용한다. <code>expr</code>에는 숫자형만 가능하다. <code>DISTINCT</code>를 사용시 중복값을 제외한 합계를 반환한다.</p><div class="hljs code-wrapper"><pre><code class="hljs n1ql"><span class="hljs-keyword">SELECT</span> <span class="hljs-built_in">SUM</span>(salary), <span class="hljs-built_in">SUM</span>(<span class="hljs-keyword">DISTINCT</span> salary) <span class="hljs-keyword">FROM</span> employees;</code></pre></div><p><img src="https://user-images.githubusercontent.com/65166786/165666872-ad7e0b9d-1180-4b5b-8130-6e9c0dd4b012.png" alt="image"></p><h2 id="AVG"><a href="#AVG" class="headerlink" title="AVG"></a>AVG</h2><p><code>AVG</code>는 평균값을 반환한다.  <code>AVG(expr)</code>으로 사용한다.  </p><div class="hljs code-wrapper"><pre><code class="hljs n1ql"><span class="hljs-keyword">SELECT</span> <span class="hljs-built_in">AVG</span>(salary), <span class="hljs-built_in">AVG</span>(<span class="hljs-keyword">DISTINCT</span> salary) <span class="hljs-keyword">FROM</span> employees;</code></pre></div><p><img src="https://user-images.githubusercontent.com/65166786/165667008-c437fc4d-63a7-4fdd-844b-2adbab03f964.png" alt="image"></p><h2 id="MIN-amp-MAX"><a href="#MIN-amp-MAX" class="headerlink" title="MIN &amp; MAX"></a>MIN &amp; MAX</h2><p><code>MIN</code>은 최솟값을 <code>MAX</code>는 최댓값을 반환한다.<br><code>MIN(expr)</code>, <code>MAX(expr)</code>으로 사용한다.</p><div class="hljs code-wrapper"><pre><code class="hljs n1ql"><span class="hljs-keyword">SELECT</span> <span class="hljs-built_in">MIN</span>(salary), <span class="hljs-built_in">MAX</span>( salary) <span class="hljs-keyword">FROM</span> employees;</code></pre></div><p><img src="https://user-images.githubusercontent.com/65166786/165667280-62563b1c-de79-4652-b8d5-5ed177379362.png" alt="image"></p><h2 id="VARIANCE-amp-STDDEV"><a href="#VARIANCE-amp-STDDEV" class="headerlink" title="VARIANCE &amp; STDDEV"></a>VARIANCE &amp; STDDEV</h2><p><code>VARIANCE</code>는 분산을, <code>STDDEV</code>는 표준편차를 반환한다.<br><code>VARIANCE(expr)</code>, <code>STDDEV(expr)</code>으로 사용한다.</p><div class="hljs code-wrapper"><pre><code class="hljs pgsql"><span class="hljs-keyword">SELECT</span> VARIANCE(salary), STDDEV(salary) <span class="hljs-keyword">FROM</span> employees;</code></pre></div><p><img src="https://user-images.githubusercontent.com/65166786/165667683-b1f23cb9-5d6c-440e-a0ef-6d99c60f7f36.png" alt="image"></p><h2 id="GROUP-BY"><a href="#GROUP-BY" class="headerlink" title="GROUP BY"></a>GROUP BY</h2><p><code>GROUP BY</code>는 데이터를 그룹화하여 집계한다.</p><div class="hljs code-wrapper"><pre><code class="hljs n1ql"><span class="hljs-keyword">SELECT</span> department_id, <span class="hljs-built_in">SUM</span>(salary) <span class="hljs-keyword">FROM</span> employees<span class="hljs-keyword">GROUP</span> <span class="hljs-keyword">BY</span> department_id<span class="hljs-keyword">ORDER</span> <span class="hljs-keyword">BY</span> department_id;</code></pre></div><p><img src="https://user-images.githubusercontent.com/65166786/165668201-e8473556-525c-40ff-a5f3-e754b967d804.png" alt="image"></p><h2 id="HAVING"><a href="#HAVING" class="headerlink" title="HAVING"></a>HAVING</h2><p><code>HAVING</code>은<code>GROUP BY</code> 다음에 위치하여, <code>GROUP BY</code> 결과를 대상으로 다시 필터를 거는 역할을 한다.</p><div class="hljs code-wrapper"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> <span class="hljs-keyword">period</span>, region, <span class="hljs-built_in">SUM</span>(loan_jan_amt) total_jan <span class="hljs-keyword">FROM</span> kor_loan_status<span class="hljs-keyword">WHERE</span> <span class="hljs-keyword">period</span> <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;201311&#x27;</span><span class="hljs-keyword">GROUP</span> <span class="hljs-keyword">BY</span> <span class="hljs-keyword">period</span>, region<span class="hljs-keyword">HAVING</span> <span class="hljs-built_in">SUM</span>(loan_jan_amt) <span class="hljs-operator">&gt;</span> <span class="hljs-number">1000000</span><span class="hljs-keyword">ORDER</span> <span class="hljs-keyword">BY</span> region;</code></pre></div><p><img src="https://user-images.githubusercontent.com/65166786/165668465-3b8d4f48-6632-437c-ab76-77de2526e27b.png" alt="image"></p><h2 id="ROLLUP"><a href="#ROLLUP" class="headerlink" title="ROLLUP"></a>ROLLUP</h2><p><code>ROLLUP</code>은 <code>GROUP BY</code>절에 쓰이며  <code>expr</code>로 명시한 표현식을 기준으로 집계한 결과를 보여준다.  표현식의 수와 순서에 따라 레벨별로 집계한 결과가 반환된다.</p><h2 id="CUBE"><a href="#CUBE" class="headerlink" title="CUBE"></a>CUBE</h2><p><code>CUBE</code>는 <code>ROLLUP</code>과 비슷하다. <code>ROLLUP</code>이 레벨로 나누어 순차적 집계를 했다면, <code>CUBE</code>는 표현식의 개수로 가능한 모든 조합을 집계한 결과를 반환한다.<br><code>CUBE</code>는 2의 (expr) 제곱 만큼 종류별로 집계된다.</p><h2 id="GROUPING-SETS"><a href="#GROUPING-SETS" class="headerlink" title="GROUPING SETS"></a>GROUPING SETS</h2><p><code>GROUPING SETS</code>은 <code>ROLLUP</code>이나 <code>CUBE</code>처럼 <code>GROUP BY</code>절에 명시하여 그룹 쿼리에 사용되는 절이다.<br><code>GROUPING SETS(expr1, expr2, expr3)</code>를 <code>GROUP BY</code>절에 명시했을 때 괄호 안의 세 표현식 별로 각각 집계가 이루어진다.</p><h1 id="집합-연산자"><a href="#집합-연산자" class="headerlink" title="집합 연산자"></a>집합 연산자</h1><h2 id="UNION"><a href="#UNION" class="headerlink" title="UNION"></a>UNION</h2><p><code>UNION</code>은 합집합을 의미한다.</p><h2 id="UNION-ALL"><a href="#UNION-ALL" class="headerlink" title="UNION ALL"></a>UNION ALL</h2><p><code>UNION ALL</code>은 <code>UNION</code>과 비슷하나 중복 항목도 모두 조회할 수 있다.</p><h2 id="INTERSECT"><a href="#INTERSECT" class="headerlink" title="INTERSECT"></a>INTERSECT</h2><p><code>INTERSECT</code>는 교집합을 의미한다.</p><h2 id="MINUS"><a href="#MINUS" class="headerlink" title="MINUS"></a>MINUS</h2><p><code>MINUS</code>는 차집합을 의미한다.</p><h2 id="집합-연산자의-제한사항"><a href="#집합-연산자의-제한사항" class="headerlink" title="집합 연산자의 제한사항"></a>집합 연산자의 제한사항</h2><ul><li>집합 연산자로 연결되는 각 SELECT문의 SELECT 리스트의 개수와 데이터 타입은 일치해야 한다.</li><li>집합 연산자로 SELECT 문을 연결할 때 ORDER BY 절은 맨 마지막 문장에서만 사용할 수 있다.</li><li>BLOB, CLOB, BFILE 타입의 Column에 대해서는 집합 연사자를 사용할 수 없다.</li><li>UNION, INTERSECT, MINUS 연산자는 LONG형 컬럼에는 사용할 수 없다.</li><li></li></ul>]]></content>
    
    
    <categories>
      
      <category>Oracle</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Oracle</tag>
      
      <tag>Expression</tag>
      
      <tag>Condition</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Oracle의 표현식 &amp; 조건식</title>
    <link href="/2022/04/27/Oracle%20%ED%91%9C%ED%98%84%EC%8B%9D%20&amp;%20%EC%A1%B0%EA%B1%B4%EC%8B%9D/"/>
    <url>/2022/04/27/Oracle%20%ED%91%9C%ED%98%84%EC%8B%9D%20&amp;%20%EC%A1%B0%EA%B1%B4%EC%8B%9D/</url>
    
    <content type="html"><![CDATA[<h1 id="표현식"><a href="#표현식" class="headerlink" title="표현식"></a>표현식</h1><p>한 개 이상의 값과 연산자 그리고 SQL 함수 등이 결합되어 있는 식이다.</p><figure class="highlight ada"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><pre><code class="hljs ada"><span class="hljs-keyword">CASE</span> <span class="hljs-keyword">WHEN</span> 첫번째 조건 <span class="hljs-keyword">THEN</span> 값<span class="hljs-number">1</span><br> <span class="hljs-keyword">WHEN</span> 두번째 조건 <span class="hljs-keyword">THEN</span> 값<span class="hljs-number">2</span><br>... <br>  <span class="hljs-keyword">ELSE</span>    기타 값<br><span class="hljs-keyword">END</span> <br></code></pre></td></tr></table></figure><p>주의할 점은 여러 개의 조건을 사용하더라도 조건식에서 출력되는 값의 데이터 타입은 동일해야 한다는 것이다.</p><h1 id="조건식"><a href="#조건식" class="headerlink" title="조건식"></a>조건식</h1><p>하나 이상의 표현식과 논리 연산자가 결합된 식으로<br><code>TRUE</code>, <code>FALSE</code>, <code>UNKNOWN</code> 을 반환한다.</p><h2 id="비교-조건식"><a href="#비교-조건식" class="headerlink" title="비교 조건식"></a>비교 조건식</h2><p><code>ANY</code> , <code>SOME</code>, <code>ALL</code> 또는 <code>논리 연산자</code>로 비교하는 조건식이다. <code>ANY</code> 와 <code>SOME</code>은 동일하게 작동한다.</p><h2 id="논리-조건식"><a href="#논리-조건식" class="headerlink" title="논리 조건식"></a>논리 조건식</h2><p><code>AND</code>, <code>OR</code>, <code>NOT</code>을 사용하는 조건식이다 .</p><h2 id="NULL-조건식"><a href="#NULL-조건식" class="headerlink" title="NULL 조건식"></a>NULL 조건식</h2><p>특정한 값이 <code>NULL</code>인지 확인하는 조건식이다.</p><h2 id="BETWEEN-AND-조건식"><a href="#BETWEEN-AND-조건식" class="headerlink" title="BETWEEN AND 조건식"></a>BETWEEN AND 조건식</h2><p> <code>BETWEEN</code>은 범위에 해당하는 값을 찾을 때 사용된다.<br> <code>BETWEEN A AND B</code>의 형태로 사용된다.</p><h2 id="IN-조건식"><a href="#IN-조건식" class="headerlink" title="IN 조건식"></a>IN 조건식</h2><p><code>IN</code>의 경우 <code>ANY</code>와 비슷하나 다양한 부등호를 사용할 수 있다는 장점이 있다.</p><h2 id="EXISTS-조건식"><a href="#EXISTS-조건식" class="headerlink" title="EXISTS 조건식"></a>EXISTS 조건식</h2><p><code>EXISTS</code>의 경우 <code>IN</code>와 비슷하지만 조건절로 서브 쿼리를 사용해야 한다. 또한 서브 쿼리 내에 조인 조건이 있어야 한다. </p><h2 id="LIKE-조건식"><a href="#LIKE-조건식" class="headerlink" title="LIKE 조건식"></a>LIKE 조건식</h2><p><code>LIKE</code>는 문자열의 패턴을 검색할 때 사용된다.<br><code>LIKE &#39;A%&#39;</code> 의 경우 <code>A</code>로 시작하는 모든 키워드를 조회한다.<br><code>LIKE  &#39;%A%&#39;</code>의 경우 키워드 안에 <code>A</code>가 포함된 모든 키워드를 조회한다.<br><code>LIKE &#39;%A&#39;</code>의 경우 <code>A</code>로 끝나는 모든 키워드를 조회한다.<br><code>LIKE  &#39;__A%&#39;</code>의 경우 세번째 자리가 <code>A</code>인 모든 키워드를 조회한다.</p>]]></content>
    
    
    <categories>
      
      <category>Oracle</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Oracle</tag>
      
      <tag>Expression</tag>
      
      <tag>Condition</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Oracle의 다양한 연산자</title>
    <link href="/2022/04/27/Oracle%EC%9D%98%20%EC%97%B0%EC%82%B0%EC%9E%90/"/>
    <url>/2022/04/27/Oracle%EC%9D%98%20%EC%97%B0%EC%82%B0%EC%9E%90/</url>
    
    <content type="html"><![CDATA[<h1 id="연산자"><a href="#연산자" class="headerlink" title="연산자"></a>연산자</h1><p>연산자는 연산을 수행하는 역할이다.</p><h2 id="수식-연산자"><a href="#수식-연산자" class="headerlink" title="수식 연산자"></a>수식 연산자</h2><p><code>+</code> <code>-</code> <code>*</code> <code>/</code> 의 수식 연산자가 존재한다.</p><h2 id="문자-연산자"><a href="#문자-연산자" class="headerlink" title="문자 연산자"></a>문자 연산자</h2><p><code>||</code>는 두 문자를 붙이는 역할이다.</p><figure class="highlight n1ql"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><pre><code class="hljs n1ql"><span class="hljs-keyword">SELECT</span> employee_id || <span class="hljs-string">&#x27;-&#x27;</span> || emp_name <span class="hljs-keyword">AS</span> employee_info<br> <span class="hljs-keyword">FROM</span> employees<br><span class="hljs-keyword">WHERE</span> ROWNUM &lt; <span class="hljs-number">5</span>;<br></code></pre></td></tr></table></figure><h2 id="논리-연산자"><a href="#논리-연산자" class="headerlink" title="논리 연산자"></a>논리 연산자</h2><p><code>&gt;</code>  <code>&lt;</code> <code>&gt;=</code> <code>&lt;=</code> <code>=</code>의 부등호가 존재하며,<br><code>&lt;&gt;</code> <code>!=</code> <code>^=</code> 의 부등호는 모두 “같지 않다” 라는 의미로 쓰인다 .</p><h2 id="집합-연산자"><a href="#집합-연산자" class="headerlink" title="집합 연산자"></a>집합 연산자</h2><p>집합 연산자는 나중에~</p><h2 id="계층형-쿼리-연산자"><a href="#계층형-쿼리-연산자" class="headerlink" title="계층형 쿼리 연산자"></a>계층형 쿼리 연산자</h2><p>계층형 쿼리 연산자는 나중에~</p>]]></content>
    
    
    <categories>
      
      <category>Oracle</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Oracle</tag>
      
      <tag>Operator</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SQL DML 알아보기</title>
    <link href="/2022/04/26/SQL%20DDL/"/>
    <url>/2022/04/26/SQL%20DDL/</url>
    
    <content type="html"><![CDATA[<h1 id="대표적인-DML"><a href="#대표적인-DML" class="headerlink" title="대표적인 DML"></a>대표적인 DML</h1><h2 id="SELECT"><a href="#SELECT" class="headerlink" title="SELECT"></a>SELECT</h2><p>테이블이나 뷰에 있는 데이터를 조회할 때 <code>SELECT</code>를 사용한다.</p><figure class="highlight pgsql"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">SELECT</span> * 혹은 <span class="hljs-keyword">column</span> <br> <span class="hljs-keyword">FROM</span> [스키마.]테이블명 혹은 [스키마.]뷰명<br><span class="hljs-keyword">WHERE</span> 조건<br><span class="hljs-keyword">ORDER</span> <span class="hljs-keyword">BY</span> <span class="hljs-keyword">column</span>;<br></code></pre></td></tr></table></figure><p>다수의 테이블에서 데이터 조회하기</p><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs n1ql"><span class="hljs-keyword">SELECT</span> a.employee_id, a.emp_name, a.department_id,<br>           b.department_name<br>      <span class="hljs-keyword">FROM</span> employees a,<br>           departments b<br>     <span class="hljs-keyword">WHERE</span> a.department_id = b.department_id;<br></code></pre></td></tr></table></figure><p><code>a</code>와 <code>b</code>는 <code>employees</code>와 <code>departments</code> 대신 사용되는 별칭이다. column 명에 별칭을 붙일때에는 <code>기존 column명 AS column별칭</code>의 형태로 사용한다.</p><h2 id="INSERT"><a href="#INSERT" class="headerlink" title="INSERT"></a>INSERT</h2><p>데이터의 신규 입력의 경우 <code>INSERT</code>를 사용하는데,<br>크게 기본 형태, column명 생략 형태, INSERT~SELECT 형태로 나눌 수 있다.</p><h3 id="기본-형태"><a href="#기본-형태" class="headerlink" title="기본 형태"></a>기본 형태</h3><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs n1ql"><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> [스키마.]테이블명 (column1,column2...)<br><span class="hljs-keyword">VALUES</span> (값<span class="hljs-number">1</span>, 값<span class="hljs-number">2.</span>.);<br></code></pre></td></tr></table></figure><h3 id="column명-생략-형태"><a href="#column명-생략-형태" class="headerlink" title="column명 생략 형태"></a>column명 생략 형태</h3><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs n1ql"><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> [스키마.]테이블명<br><span class="hljs-keyword">VALUES</span> (값<span class="hljs-number">1</span>, 값<span class="hljs-number">2</span>, ...);<br></code></pre></td></tr></table></figure><h3 id="INSERT-SELECT-형태"><a href="#INSERT-SELECT-형태" class="headerlink" title="INSERT~SELECT 형태"></a>INSERT~SELECT 형태</h3><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs n1ql"><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> [스키마.]테이블명 (column1,column2...)<br><span class="hljs-keyword">SELECT</span> 문;<br></code></pre></td></tr></table></figure><h2 id="UPDATE"><a href="#UPDATE" class="headerlink" title="UPDATE"></a>UPDATE</h2><p>테이블의 기존 데이터를 수정할 때 <code>UPDATE</code>를 사용한다</p><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs n1ql"><span class="hljs-keyword">UPDATE</span> [스키마.]테이블명<br><span class="hljs-keyword">SET</span> 컬럼<span class="hljs-number">1</span> = 변경값<span class="hljs-number">1</span>,<br>    컬럼<span class="hljs-number">2</span> = 변경값<span class="hljs-number">2</span>,<br>...<br><span class="hljs-keyword">WHERE</span> 조건;<br></code></pre></td></tr></table></figure><h2 id="MERGE"><a href="#MERGE" class="headerlink" title="MERGE"></a>MERGE</h2><p>조건을 비교해서 테이블에 해당 조건에 맞는 데이터가 없으면 <code>INSERT</code> 있으면 <code>UPDATE</code>를 수행한다.</p><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs n1ql"><span class="hljs-keyword">MERGE</span> <span class="hljs-keyword">INTO</span> [스키마.]테이블명<br>  <span class="hljs-keyword">USING</span> (<span class="hljs-keyword">update</span>나 <span class="hljs-keyword">insert</span>될 데이터 원천)<br>    <span class="hljs-keyword">ON</span> (<span class="hljs-keyword">update</span>될 조건)<br><span class="hljs-keyword">WHEN</span> <span class="hljs-keyword">MATCHED</span> <span class="hljs-keyword">THEN</span><br>   <span class="hljs-keyword">SET</span> column1 = 값<span class="hljs-number">1</span>, column2 = 값<span class="hljs-number">2</span>, ...<br><span class="hljs-keyword">WHERE</span> <span class="hljs-keyword">update</span> 조건<br>   <span class="hljs-keyword">DELETE</span> <span class="hljs-keyword">WHERE</span> update_delete 조건<br><span class="hljs-keyword">WHEN</span> <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">MATCHED</span> <span class="hljs-keyword">THEN</span><br>  <span class="hljs-keyword">INSERT</span> (column1,column2...) <span class="hljs-keyword">VALUES</span> (값<span class="hljs-number">1</span>, 값<span class="hljs-number">2</span>,...)<br>  <span class="hljs-keyword">WHERE</span> <span class="hljs-keyword">insert</span> 조건;<br></code></pre></td></tr></table></figure><h2 id="DELETE"><a href="#DELETE" class="headerlink" title="DELETE"></a>DELETE</h2><p>테이블에 있는 데이터를 삭제할 때 <code>DELETE</code>를 사용한다.</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- 일반적으로 쓰임</span><br><span class="hljs-keyword">DELETE</span> [<span class="hljs-keyword">FROM</span>] [스키마.]테이블명<br><span class="hljs-keyword">WHERE</span> <span class="hljs-keyword">delete</span> 조건; <br><br><span class="hljs-comment">-- 특정 파티션만 삭제 할 경우</span><br><span class="hljs-keyword">DELETE</span> [<span class="hljs-keyword">FROM</span>] [스키마.]테이블명 <span class="hljs-keyword">PARTITION</span> (파티션명)<br><span class="hljs-keyword">WHERE</span> <span class="hljs-keyword">delete</span> 조건;<br></code></pre></td></tr></table></figure><h2 id="COMMIT-amp-ROLLBACK"><a href="#COMMIT-amp-ROLLBACK" class="headerlink" title="COMMIT &amp; ROLLBACK"></a>COMMIT &amp; ROLLBACK</h2><p><code>COMMIT</code>는 변경한 데이터를 데이터베이스에 마지막으로 반영할 때<br><code>ROLLBACK</code>는 반대로 변경한 데이터를 변경 전으로 되돌릴 때 사용한다.</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">COMMIT</span> [<span class="hljs-keyword">WORK</span>] [<span class="hljs-keyword">TO</span> <span class="hljs-keyword">SAVEPOINT</span> 세이브포인트명] ;<br><span class="hljs-keyword">ROLLBACK</span> [<span class="hljs-keyword">WORK</span>] [<span class="hljs-keyword">TO</span> <span class="hljs-keyword">SAVEPOINT</span> 세이브포인트명] ;<br></code></pre></td></tr></table></figure><h2 id="TRUNCATE"><a href="#TRUNCATE" class="headerlink" title="TRUNCATE"></a>TRUNCATE</h2><p>일반적으로 사용되는 <code>DELETE</code>문의 경우 <code>COMMIT</code>를 실행해야 데이터가 완전히 삭제되고, <code>ROLLBACK</code>을 실행하면 데이터가 다시 복구된다.<br>그러나 <code>TRUNCATE</code>문의 경우 데이터가 바로 삭제되고, <code>ROLLBACK</code>을 실행해도 데이터가 복구되지 않는다. 또한 <code>WHERE</code>조건문을 쓸 수 없으므로 항상 테이블 데이터 전체가 삭제된다.</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css">TRUNCATE <span class="hljs-selector-tag">TABLE</span> <span class="hljs-selector-attr">[스키마명.]</span>테이블명;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Oracle</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Oracle</tag>
      
      <tag>DML</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Oracle SQL 기본 설정</title>
    <link href="/2022/04/23/Oracle%20Sql%20%EA%B8%B0%EB%B3%B8%20%EC%84%A4%EC%A0%95/"/>
    <url>/2022/04/23/Oracle%20Sql%20%EA%B8%B0%EB%B3%B8%20%EC%84%A4%EC%A0%95/</url>
    
    <content type="html"><![CDATA[<p>﻿# Sqlplus 설정</p><p>터미널을 연 다음 <code>Sqlplus</code>를 입력하여 <code>Sqlplus</code>에 로그인한다.<br><img src="https://user-images.githubusercontent.com/65166786/165076782-c46eaa26-6840-44b5-b0cf-1c431e6a2f1e.png" alt="sqlplus"></p><h2 id="테이블-스페이스-생성"><a href="#테이블-스페이스-생성" class="headerlink" title="테이블 스페이스 생성"></a>테이블 스페이스 생성</h2><figure class="highlight pgsql"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLESPACE</span> myts DATAFILE <span class="hljs-string">&#x27;C:\sqldevelop\oradata\MYORACLE\myts.dbf&#x27;</span> SIZE <span class="hljs-number">100</span>M AUTOEXTEND <span class="hljs-keyword">ON</span> NEXT <span class="hljs-number">5</span>M;<br></code></pre></td></tr></table></figure><p><img src="https://user-images.githubusercontent.com/65166786/165011283-6f6c40ca-acb3-4120-a438-e929683ea9fb.png" alt="image"></p><h2 id="사용자-계정-생성"><a href="#사용자-계정-생성" class="headerlink" title="사용자 계정 생성"></a>사용자 계정 생성</h2><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">USER</span> ora_user IDENTIFIED <span class="hljs-keyword">BY</span> huisu <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">TABLESPACE</span> myts <span class="hljs-keyword">TEMPORARY</span> <span class="hljs-keyword">TABLESPACE</span> <span class="hljs-keyword">TEMP</span>;<br></code></pre></td></tr></table></figure><p><img src="https://user-images.githubusercontent.com/65166786/165011294-d1c78ae3-8a1e-49a3-a9a8-5902c6763f01.png" alt="image"></p><p>오류 발생시 하단의 코드를 입력해준다.</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">alter</span> <span class="hljs-keyword">session</span> <span class="hljs-keyword">set</span> &quot;_ORACLE_SCRIPT&quot;=<span class="hljs-keyword">true</span>;<br></code></pre></td></tr></table></figure><p><img src="https://user-images.githubusercontent.com/65166786/165078122-4963451e-5ec2-4977-b405-b3e5684565fc.png" alt="image"><br>사용자 생성이 정상적으로 된 것을 확인 할 수 있다.<br>(myts인 테이블스페이스 이름을 myte로 오타를 냈다.)</p><p><code>ora_user</code>에  DBA 권한을 부여한다.</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">GRANT</span> DBA <span class="hljs-keyword">TO</span> ora_user;<br></code></pre></td></tr></table></figure><p>데이터 베이스에 접속한다.</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs abnf">connect ora_user/huisu<span class="hljs-comment">;</span><br></code></pre></td></tr></table></figure><p><img src="https://user-images.githubusercontent.com/65166786/165011687-11dac4c4-7202-4716-b37f-49916d9e45ae.png" alt="image"></p><h1 id="Sql-Developer-설정"><a href="#Sql-Developer-설정" class="headerlink" title="Sql Developer 설정"></a>Sql Developer 설정</h1><p>Sql Developer를 실행한다.<br>다른 버전의 환경설정을 불러오는지 물어보는 팝업이 뜨면 아니오를 누른다. </p><h2 id="새로운-연결-정보-설정하기"><a href="#새로운-연결-정보-설정하기" class="headerlink" title="새로운 연결 정보 설정하기"></a>새로운 연결 정보 설정하기</h2><p>오른쪽 위 초록색 + 아이콘을 눌러 새로운 데이터베이스 접속을 만든다.<br>열리는 팝업창에서 설정을 진행한다.<br>사용자 이름 : ora_user<br>비밀번호 : huisu (IDENTIFIED BY 뒤의 단어)<br>SID : myoracle<br><img src="https://user-images.githubusercontent.com/65166786/165080147-fff07e91-1ab1-4b75-9b39-7ea4f1a9a35e.png" alt="image"><br>설정한 뒤 테스트를 눌러 접속이 제대로 되는지 확인한다.<br>성공이라고 표시되면 접속을 누른다.</p><h2 id="날짜-및-시간-형식-변경하기"><a href="#날짜-및-시간-형식-변경하기" class="headerlink" title="날짜 및 시간 형식 변경하기"></a>날짜 및 시간 형식 변경하기</h2><p>도구 &gt; 환경 설정 &gt; 데이터 베이스 &gt; NLS 항목으로 진입해서<br>날짜 형식을 <code>YYYY/MM/DD</code>로, 시간 형식을<code>YYYY/MM/DD HH24:MI:SS</code>로 변환한다.<br><img src="https://user-images.githubusercontent.com/65166786/165016347-a0e2cd1e-af34-488d-ab60-927db9530d41.png" alt="image"></p><h2 id="샘플-스키마-설치하기"><a href="#샘플-스키마-설치하기" class="headerlink" title="샘플 스키마 설치하기"></a>샘플 스키마 설치하기</h2><p>샘플 스키마 파일을 다운 받는다.</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">$ git clone https:<span class="hljs-regexp">//gi</span>thub.com<span class="hljs-regexp">/gilbutITbook/</span><span class="hljs-number">006696</span><br></code></pre></td></tr></table></figure><p>C 드라이브에 backup 폴더를 생성한다.<br>터미널을 연 뒤 C:\backup 폴더로 이동한다. </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> backup<br></code></pre></td></tr></table></figure><p>스키마 파일을 설치한다.<br><code>huisu</code>의 경우 비밀번호이므로<br>각자 설정한 비밀번호로 바꾸어야한다.</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">imp ora_user/huisu <span class="hljs-attribute">file</span>=expcust.dmp <span class="hljs-attribute">log</span>=expcust.log <span class="hljs-attribute">ignore</span>=y <span class="hljs-attribute">grants</span>=y <span class="hljs-attribute">rows</span>=y <span class="hljs-attribute">indexes</span>=y <span class="hljs-attribute">full</span>=y<br></code></pre></td></tr></table></figure><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">imp ora_user/huisu <span class="hljs-attribute">file</span>=expall.dmp <span class="hljs-attribute">log</span>=empall.log <span class="hljs-attribute">ignore</span>=y <span class="hljs-attribute">grants</span>=y <span class="hljs-attribute">rows</span>=y <span class="hljs-attribute">indexes</span>=y <span class="hljs-attribute">full</span>=y<br></code></pre></td></tr></table></figure><p>워크시트에 아래의 코드를 작성하여<br>10개의 행이 출력되는지 확인해본다.</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">SELECT</span> <span class="hljs-built_in">table_name</span> <span class="hljs-keyword">FROM</span> user_tables;<br></code></pre></td></tr></table></figure><p><img src="https://user-images.githubusercontent.com/65166786/165017760-1e1ce996-d65e-4724-8805-a41b7e096148.png" alt="image"><br>제대로 출력되는 것을 확인할 수 있다.</p>]]></content>
    
    
    <categories>
      
      <category>Oracle</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Oracle</tag>
      
      <tag>SQL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Oracle 19c를 Windows에 설치하기</title>
    <link href="/2022/04/23/Oracle19c%EC%9D%98%20Windows%20%EC%84%A4%EC%B9%98/"/>
    <url>/2022/04/23/Oracle19c%EC%9D%98%20Windows%20%EC%84%A4%EC%B9%98/</url>
    
    <content type="html"><![CDATA[<p>﻿# Oracle19c의 Windows 설치</p><h2 id="Sql-Developer의-설치"><a href="#Sql-Developer의-설치" class="headerlink" title="Sql Developer의 설치"></a>Sql Developer의 설치</h2><p><a href="https://www.oracle.com/tools/downloads/sqldev-downloads.html">Sql Developer</a>를 ZIP로 다운 받는다.<br><img src="https://user-images.githubusercontent.com/65166786/165004190-282f737c-ec6a-4f25-9417-459832731bd4.png" alt="image"><br>압축을 풀면 설치가 끝난다.</p><h2 id="Oracle의-설치"><a href="#Oracle의-설치" class="headerlink" title="Oracle의 설치"></a>Oracle의 설치</h2><p><a href="https://www.oracle.com/database/technologies/oracle-database-software-downloads.html#19c">Oracle 다운로드 사이트</a>에 접속하여 Oracle 19c를 ZIP로 다운받는다.  </p><p><img src="https://user-images.githubusercontent.com/65166786/164979804-fab8fa2d-4908-470c-80fa-871fa92050b1.png" alt="image"><br>압축을 푼다. </p><p>C 드라이브에 Oracle 폴더를 만든 뒤 파일을 옮긴 후 설치 파일을 실행한다.<br>단일 인스턴스 데이터베이스 생성 및 구성<br>데스크톱 클래스 &gt; 가상 계정 사용<br>전역 데이터베이스 이름을 <code>myoracle</code>로 수정하고<br>컨테이너 데이터베이스로 생성에 체크해준다.<br>비밀번호는 쉬운 걸로 설정한다.(ex. 1234)<br><img src="https://user-images.githubusercontent.com/65166786/165495195-fe5113b8-270c-4d62-8b3e-3c6600c2ec3d.png" alt="image"><br>그 후 설치를 누르면 설치된다.</p>]]></content>
    
    
    <categories>
      
      <category>Setting</category>
      
      <category>Oracle</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Setting</tag>
      
      <tag>Oracle</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Oracle 19c를 Ubuntu 20.04에 설치하기</title>
    <link href="/2022/04/23/oracle19c%EC%9D%98%20ubuntu%20%EC%84%A4%EC%B9%98/"/>
    <url>/2022/04/23/oracle19c%EC%9D%98%20ubuntu%20%EC%84%A4%EC%B9%98/</url>
    
    <content type="html"><![CDATA[<h1 id="Oracle19c의-Ubuntu설치"><a href="#Oracle19c의-Ubuntu설치" class="headerlink" title="Oracle19c의 Ubuntu설치"></a>Oracle19c의 Ubuntu설치</h1><h2 id="Docker-설치"><a href="#Docker-설치" class="headerlink" title="Docker 설치"></a>Docker 설치</h2><p>HTTPS를 통해 레포지토리를 이용하기 위해 패키지를 설치해준다.</p><figure class="highlight livescript"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><pre><code class="hljs livescript">$ sudo apt-get update<br><br>$ sudo apt-get -y install <span class="hljs-string">\</span><br>    apt-transport-https <span class="hljs-string">\</span><br>    ca-certificates <span class="hljs-string">\</span><br>    curl <span class="hljs-string">\</span><br>    gnupg <span class="hljs-string">\</span><br>    lsb-release<br></code></pre></td></tr></table></figure><p> Docker의 Official GPG Key 를 등록한다.</p> <figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">$ curl -fsSL https:<span class="hljs-regexp">//</span>download.docker.com<span class="hljs-regexp">/linux/u</span>buntu<span class="hljs-regexp">/gpg | sudo gpg --dearmor -o /u</span>sr<span class="hljs-regexp">/share/</span>keyrings/docker-archive-keyring.gpg<br></code></pre></td></tr></table></figure><p>Docker Engine을 설치한다.</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs vim">$ sudo apt-<span class="hljs-built_in">get</span> <span class="hljs-keyword">update</span><br>$ sudo apt-<span class="hljs-built_in">get</span> install docker-<span class="hljs-keyword">ce</span> docker-<span class="hljs-keyword">ce</span>-cli containerd.io<br></code></pre></td></tr></table></figure><p>설치가 완료되면 <code>docker --version</code> 을 실행해서 버전을 확인한다.</p><h2 id="Docker-Compose-설치"><a href="#Docker-Compose-설치" class="headerlink" title="Docker Compose 설치"></a>Docker Compose 설치</h2><p>Docker Compose는 여러개의 도커 어플리케이션 컨테이너를 정의하고 실행할 수 있게 도와주는 툴이다. </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ sudo curl -L <span class="hljs-string">&quot;https://github.com/docker/compose/releases/download/1.29.2/docker-compose-<span class="hljs-subst">$(uname -s)</span>-<span class="hljs-subst">$(uname -m)</span>&quot;</span> -o /usr/local/bin/docker-compose<br></code></pre></td></tr></table></figure><p>실행할 수 있는 권한을 부여한다.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ sudo <span class="hljs-built_in">chmod</span> +x /usr/local/bin/docker-compose<br></code></pre></td></tr></table></figure><p>설치가 제대로 되었는지 확인한다.</p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ada">$ docker-compose <span class="hljs-comment">--version</span><br></code></pre></td></tr></table></figure><h2 id="Docker-Oracle-image-다운로드"><a href="#Docker-Oracle-image-다운로드" class="headerlink" title="Docker Oracle-image 다운로드"></a>Docker Oracle-image 다운로드</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash"><span class="hljs-built_in">mkdir</span> /var/docker</span> <br><span class="hljs-meta prompt_">$ </span><span class="language-bash"><span class="hljs-built_in">cd</span> /var/docker</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">git <span class="hljs-built_in">clone</span> https://github.com/oracle/docker-images</span><br></code></pre></td></tr></table></figure><p><code>/var/docker</code> 경로에 폴더를 만든 뒤, 해당 폴더로 이동하여 <code>oracle docker-images</code>를 다운 받는다.</p><h2 id="Oracle-다운로드"><a href="#Oracle-다운로드" class="headerlink" title="Oracle 다운로드"></a>Oracle 다운로드</h2><p><a href="https://www.oracle.com/database/technologies/oracle-database-software-downloads.html#19c">Oracle 다운로드 사이트</a>에 접속하여 Oracle 19c를 ZIP로 다운받는다. RPM파일의 경우<br>Ubuntu 운영체제에서 사용할 수 없다.<br><img src="https://user-images.githubusercontent.com/65166786/164979804-fab8fa2d-4908-470c-80fa-871fa92050b1.png" alt="image"><br>다운로드한 ZIP파일을 Docker image 내로 복사한다.</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">$ cp Downloads<span class="hljs-regexp">/LINUX.X64_193000_db_home.zip /</span>var<span class="hljs-regexp">/docker/</span>docker-images<span class="hljs-regexp">/OracleDatabase/</span>SingleInstance<span class="hljs-regexp">/dockerfiles/</span><span class="hljs-number">19.3</span>.<span class="hljs-number">0</span>/<br></code></pre></td></tr></table></figure><h2 id="Docker-실행"><a href="#Docker-실행" class="headerlink" title="Docker 실행"></a>Docker 실행</h2><p><code>dockerfiles</code> 폴더로 이동한 뒤 <code>buildContainerImage.sh</code>를 실행해 Docker를 실행한다.<br>Docker의 실행에는 사용자의 환경에 따라 시간이 좀 걸린다.</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs awk">$ cd <span class="hljs-regexp">/var/</span>docker<span class="hljs-regexp">/docker-images/</span>OracleDatabase<span class="hljs-regexp">/SingleInstance/</span>dockerfiles<br>$ ./buildContainerImage.sh -v <span class="hljs-number">19.3</span>.<span class="hljs-number">0</span> -e<br></code></pre></td></tr></table></figure><p>실행이 완료되면 <code>&quot;Build completed in xxx seconds.&quot;</code>이라는 메시지를 볼 수 있다.<br><code>docker images</code>를 실행하여,  <code>19.3.0-ee</code>이라는 이미지가 존재하는지를 확인해본다.</p><figure class="highlight crystal"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs crystal"><span class="hljs-variable">$ </span>docker images<br></code></pre></td></tr></table></figure><p><img src="https://user-images.githubusercontent.com/65166786/164979773-68f38a51-992f-4542-8acb-cd388b00c49e.png" alt="image"></p><p>docker 명령어를 실행할때 마다 permission denied가 뜨는 것을 방지해준다.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo usermod -aG docker <span class="hljs-variable">$USER</span><br></code></pre></td></tr></table></figure><h2 id="Docker-image-실행-oracle-실행"><a href="#Docker-image-실행-oracle-실행" class="headerlink" title="Docker image 실행(oracle 실행)"></a>Docker image 실행(oracle 실행)</h2><p>Docker image를 실행한다.</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">docker</span> run --name oracle19c --network host -p <span class="hljs-number">1521</span>:<span class="hljs-number">1521</span> -p <span class="hljs-number">5500</span>:<span class="hljs-number">5500</span> -e ORACLE_SID=myoracle -e ORACLE_PDB=oracle -e ORACLE_PWD=<span class="hljs-number">1234</span> -v /opt/oracle:/u01/oracle oracle/database:<span class="hljs-number">19</span>.<span class="hljs-number">3</span>.<span class="hljs-number">0</span>-ee<br></code></pre></td></tr></table></figure><p> 실행 시 출력되는 텍스트의 첫번째 줄에서 패스워드를 볼 수 있다. 찾지 못해도 괜찮다.<br> 패스워드는 따로 설정 가능하다.</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">ORACLE PASSWORD <span class="hljs-keyword">FOR</span> SYS,<span class="hljs-built_in"> SYSTEM </span><span class="hljs-keyword">AND</span> PDBADMIN: <span class="hljs-attribute">ET10BpTqpVg</span>=1  <br></code></pre></td></tr></table></figure><p>이미지의 실행에도 사용자의 환경에 따라 시간이 좀 걸린다.<br>실행이 완료되면, <code>DATABASE IS READY TO USE</code>라는 문구를 볼 수 있다.<br>또한 마지막 줄은 <code>XDB initialized</code>이여야 한다.</p><p>ctrl + c를 눌러 실행을 종료하고 생성된 이미지들을 확인해본다.</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css">docker ps -<span class="hljs-selector-tag">a</span><br></code></pre></td></tr></table></figure><p><img src="https://user-images.githubusercontent.com/65166786/164980316-f9bfb05b-2180-4c24-b2f7-73b7ea208e15.png"><br><code>database:19.3.0-ee</code> 이미지의 이름이 <code>oracle19c</code>인것을 확인한다.<br><code>oracle19c</code> 이미지를 실행한다.(Oracle Database의 실행)</p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">docker <span class="hljs-literal">start</span> oracle19c<br></code></pre></td></tr></table></figure><p>1분정도 지난 뒤 <a href="https://localhost:5500/em/shell">https://localhost:5500/em/shell</a> 에 접속 시 Oracle Database를 확인 할 수 있다.<br><img src="https://user-images.githubusercontent.com/65166786/164980577-7e6ef634-803c-4ca6-8b24-c34df5cf3870.png" alt="image"><br>이렇게 로그인 창이 뜬다면<br>Username : <code>system</code><br>Password :  이전에 출력되었던 패스워드, 못 보았을 경우 하단의 코드로 패스워드를<br><code>oracle</code>로 수정한다.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker <span class="hljs-built_in">exec</span> oracle19c ./setPassword.sh oracle<br></code></pre></td></tr></table></figure><p>Container : <code>orclpdb1</code><br>으로 입력하여 로그인 한다.</p><p>로그인하면 이런 화면이 보인다<br><img src="https://user-images.githubusercontent.com/65166786/164980842-1ce19be8-ebb5-4a09-8096-26063ae8e766.png" alt="image"></p><p>만약 터미널에서 Docker database에 연결하고 싶다면 하단의 코드를 입력한다.</p><figure class="highlight mel"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mel">docker <span class="hljs-keyword">exec</span> -ti oracle19c sqlplus <span class="hljs-keyword">system</span>/oracle@orclpdb1<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Setting</category>
      
      <category>Oracle</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Setting</tag>
      
      <tag>Oracle</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Oracle의 데이터 타입</title>
    <link href="/2022/04/23/Oracle%20%EB%8D%B0%EC%9D%B4%ED%84%B0%20%ED%83%80%EC%9E%85/"/>
    <url>/2022/04/23/Oracle%20%EB%8D%B0%EC%9D%B4%ED%84%B0%20%ED%83%80%EC%9E%85/</url>
    
    <content type="html"><![CDATA[<h1 id="Oracle-데이터-타입"><a href="#Oracle-데이터-타입" class="headerlink" title="Oracle 데이터 타입"></a>Oracle 데이터 타입</h1><h2 id="문자-데이터-타입"><a href="#문자-데이터-타입" class="headerlink" title="문자 데이터 타입"></a>문자 데이터 타입</h2><table><thead><tr><th>데이터 타입</th><th>설명</th></tr></thead><tbody><tr><td>CHAR (크기[ BYTE , CHAR ])</td><td>고정길이 문자, 최대 2000byte, default 값은 1byte</td></tr><tr><td>VARCARCHAR2 (크기[ BYTE , CHAR ])</td><td>가변길이 문자, 최대 4000byte, default  값은 1byte</td></tr><tr><td>NCHAR (크기)</td><td>고정길이 유니코드 문자(다국어 입력가능), 최대 2000byte, default  값은 1</td></tr><tr><td>NVARCARCHAR2 (크기)</td><td>가변길이 유니코드 문자(다국어 입력 가능), 최대 4000byte, default  값은 1</td></tr><tr><td>LONG</td><td>최대 2GB 크기의 가변길이 문자형, 잘 사용하지 않는다.</td></tr></tbody></table><p>고정길이의 경우 10byte라고 설정하면 <code>abc</code> 세 글자를 입력했을때 실제 크기가3byte이더라도  항상 10byte의 공간을 차지하게 되나,<br><code>VARCARCHAR2(가변길이)</code>의 경우 똑같이 10byte라고 설정해도 <code>abc</code> 세 글자를 입력했을때 3byte의 공간만 차지하게 된다.</p><h2 id="CHAR-amp-VARCHAR"><a href="#CHAR-amp-VARCHAR" class="headerlink" title="CHAR &amp; VARCHAR"></a>CHAR &amp; VARCHAR</h2><p>고정길이(CHAR)와 가변길이(VARCHAR)로 이루어진 테이블을 생성한다.</p><figure class="highlight sql"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> ex2_1 (<br>    COLUMN1 <span class="hljs-type">CHAR</span>(<span class="hljs-number">10</span>),<br>    COLUMN2 <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">10</span>)<br>);<br></code></pre></td></tr></table></figure><p><code>abc</code>를 고정길이(CHAR)와 가변길이(VARCHAR)에 입력한다.</p><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs n1ql"><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> ex2_1 (column1, column2) <span class="hljs-keyword">VALUES</span> (<span class="hljs-string">&#x27;abc&#x27;</span>, <span class="hljs-string">&#x27;abc&#x27;</span>);<br></code></pre></td></tr></table></figure><p>고정길이(CHAR)과 가변길이(VARCHAR)에 각각 <code>abc</code>를 입력했을때<br>고정길이는 10의 길이를 가지나, 가변길이는 <code>abc</code>의 길이는 3의 길이를 가지는 것을 확인할 수 있다.</p><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs n1ql"><span class="hljs-keyword">SELECT</span> column1<br>       , <span class="hljs-built_in">LENGTH</span>(column1) <span class="hljs-keyword">as</span> len1<br>       , column2<br>       , <span class="hljs-built_in">LENGTH</span>(column2) <span class="hljs-keyword">as</span> len2<br> <span class="hljs-keyword">FROM</span> ex2_1;<br></code></pre></td></tr></table></figure><p><img src="https://user-images.githubusercontent.com/65166786/165080984-167a59f7-6fda-43a5-92b1-711340149411.png" alt="고정길이와 가변길이"></p><h2 id="VARCHAR2"><a href="#VARCHAR2" class="headerlink" title="VARCHAR2"></a>VARCHAR2</h2><p><code>NVARCHAR2</code>는 유니코드 문자형으로 다국어 입력이 가능하다.</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs scss">CREATE <span class="hljs-selector-tag">TABLE</span> <span class="hljs-built_in">ex2_2</span>(<br>        COLUMN1    VARCHAR2(<span class="hljs-number">3</span>), # default 값인 byte가 적용된다.<br>        COLUMN2    <span class="hljs-built_in">VARCHAR2</span>(<span class="hljs-number">3</span> byte),<br>        COLUMN3    <span class="hljs-built_in">VARCHAR2</span>(<span class="hljs-number">3</span> char)<br>);<br></code></pre></td></tr></table></figure><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs n1ql"><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> ex2_2 <span class="hljs-keyword">VALUES</span>(<span class="hljs-string">&#x27;abc&#x27;</span>, <span class="hljs-string">&#x27;abc&#x27;</span>, <span class="hljs-string">&#x27;abc&#x27;</span>);<br></code></pre></td></tr></table></figure><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs n1ql"><span class="hljs-keyword">SELECT</span> column1, <span class="hljs-built_in">LENGTH</span>(column1) <span class="hljs-keyword">AS</span> len1<br>        ,column2, <span class="hljs-built_in">LENGTH</span>(column2) <span class="hljs-keyword">AS</span> len2<br>        ,column3, <span class="hljs-built_in">LENGTH</span>(column3) <span class="hljs-keyword">AS</span> len3<br>    <span class="hljs-keyword">FROM</span> ex2_2;<br></code></pre></td></tr></table></figure><p>영문자 <code>abc</code>의 경우 크기가 모두 3byte로 나오는 것을 확인할 수 있다.<br><img src="https://user-images.githubusercontent.com/65166786/165047780-af36d7a9-dec9-4eab-bd71-3333bfbd1a16.png" alt="image"></p><p>이번에는 영문자가 아닌 한글을 넣어본다. 영어는 문자 하나당 1byte의 공간을 가지지만, 한글의 경우 2byte의 공간을 차지한다.</p><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs n1ql"><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> ex2_2 <span class="hljs-keyword">VALUES</span> (<span class="hljs-string">&#x27;홍길동&#x27;</span>, <span class="hljs-string">&#x27;홍길동&#x27;</span>, <span class="hljs-string">&#x27;홍길동&#x27;</span>);<br></code></pre></td></tr></table></figure><p>문자 하나당 2byte의 저장공간이기에 3byte의 공간으로 정의된 <code>column1,column2</code>에 들어갈 수 없어 오류가 발생하고 말았다.</p><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs n1ql"><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> ex2_2 (column3) <span class="hljs-keyword">VALUES</span> (<span class="hljs-string">&#x27;홍길동&#x27;</span>);<br></code></pre></td></tr></table></figure><p>하지만 <code>column3</code>에서는 <code>byte</code>가 아닌 <code>char</code>을 명시했기에 입력이 가능하다.</p><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs n1ql"><span class="hljs-keyword">SELECT</span> column3, <br>    <span class="hljs-built_in">LENGTH</span>(column3) <span class="hljs-keyword">AS</span> len3, <br>    LENGTHB(column3) <span class="hljs-keyword">AS</span> bytelen<br><span class="hljs-keyword">FROM</span> ex2_2;<br></code></pre></td></tr></table></figure><p><img src="https://user-images.githubusercontent.com/65166786/165048939-0f0bf2ba-37da-4ac7-a2d3-8d4fd1f9af63.png" alt="홍길동"><br>이전에 한글 한 문자는 2byte의 공간을 가진다고 했지만,<br>DB의 설정에 따라 3byte의 공간을 가지는 경우도 있다.</p><h2 id="숫자-데이터-타입"><a href="#숫자-데이터-타입" class="headerlink" title="숫자 데이터 타입"></a>숫자 데이터 타입</h2><table><thead><tr><th>데이터 타입</th><th>설명</th></tr></thead><tbody><tr><td>NUMBER [(p, [s])]</td><td>가변숫자 , p(1<del>38, default 값은 38)와 s(-84</del>127, default 값은 0)는 십진수 기준, 최대 22byte</td></tr><tr><td>FLOAT[(p)]</td><td>NUMBER의 하위 타입. p는 1~128. default 값은 128. 이진수 기준. 최대 22byte</td></tr><tr><td>BINARY_FLOAT</td><td>32비트 부동소수점 수. 최대 4byte</td></tr><tr><td>BINARY_DOUBLE</td><td>64비트 부동소수점 수. 최대 8byte</td></tr></tbody></table><p>총 4가지의 숫자 타입 중 NUMBER만 사용할 때가 많다.<br><code>INTEGER</code>같은 정수형, <code>DECIMAL</code>같은 실수형도 있지만,<br>모두 내부적으로는 <code>NUMBER</code>으로 변환되어 생성된다.</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> ex2_3(<br>    COL_INT <span class="hljs-type">INTEGER</span><br>    , COL_DEC <span class="hljs-type">DECIMAL</span><br>    , COL_NUM NUMBER<br>);<br></code></pre></td></tr></table></figure><p>생성된 테이블 컬럼의 타입과 길이는 user_tab_cols라는 시스템 뷰를 조회하면 알 수 있다.</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">SELECT</span><br>    column_id<br>    ,<span class="hljs-built_in">column_name</span><br>    ,data_type<br>    ,data_length<br>    <span class="hljs-keyword">FROM</span> user_tab_cols<br><span class="hljs-keyword">WHERE</span> <span class="hljs-built_in">table_name</span> = <span class="hljs-string">&#x27;EX2_3&#x27;</span><br><span class="hljs-keyword">ORDER</span> <span class="hljs-keyword">BY</span> column_id;<br></code></pre></td></tr></table></figure><p>모두 <code>NUMBER</code>형으로 생성되었고 크기는 22인것을 확인할 수 있다.<br><code>NUMBER</code>형은 따로 크기를 명시하지 않으면 최대 크기인 22byte로 생성된다. 그리고 NUMBER (p, s) 형식으로 크기를 지정할 수도 있는데,<br>p(precision)는 최대 유효숫자 자릿수를 s(scale)는 소수점 기준 자릿수를 의미한다.<br><img src="https://user-images.githubusercontent.com/65166786/165050377-88f7e068-d246-460f-977d-f91f542bcf5d.png" alt="image"></p><h2 id="FLOAT형으로-인한-오류"><a href="#FLOAT형으로-인한-오류" class="headerlink" title="FLOAT형으로 인한 오류"></a>FLOAT형으로 인한 오류</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> ex2_4 (<br>    COL_FLOT1 <span class="hljs-type">FLOAT</span>(<span class="hljs-number">32</span>) #p값을 <span class="hljs-number">32</span>로 지정<br>    ,COL_FLOT2 <span class="hljs-type">FLOAT</span><br>);<br></code></pre></td></tr></table></figure><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs n1ql"><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> ex2_4 (col_flot1, col_flot2) <span class="hljs-keyword">VALUES</span> (<span class="hljs-number">1234567891234</span>, <span class="hljs-number">1234567891234</span>);<br></code></pre></td></tr></table></figure><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs n1ql"><span class="hljs-keyword">SELECT</span> * <span class="hljs-keyword">FROM</span> ex2_4;<br></code></pre></td></tr></table></figure><p><img src="https://user-images.githubusercontent.com/65166786/165050609-225c3f79-a4ef-4958-bfc4-87d2b3275eef.png" alt="image"><br>FLOAT(p)에서는 p에 들어가는 자릿수는 이진수를 기준으로 한다. 이진수 기준 32자리를 십진수로 변환 하려면 0.30103을 곱해야 한다. 32 * 030103 &#x3D; 9.63296 이므로<br>1234567891234에서 열번째 자리만 제대로 들어가고<br>나머지는 0으로 들어가는 것을 확인 할 수 있다.</p><p>FLOAT 타입에서 p의 default값은 126(37.92978)이다.</p><h2 id="날짜-데이터-타입"><a href="#날짜-데이터-타입" class="headerlink" title="날짜 데이터 타입"></a>날짜 데이터 타입</h2><table><thead><tr><th>데이터 타입</th><th>설명</th></tr></thead><tbody><tr><td>DATE</td><td>BC 4712년 1월 1일부터 9999년 12월 31일, 연도,월,일,시,분,초까지 입력 가능하다.</td></tr><tr><td>TIMESTAMP [(fractional_seconds_precision)]</td><td>연도,월,일,시,분,초,밀리초까지 입력 가능하다. fractional_seconds_precision은 0~9까지 입력할 수 있고 default 값은 6이다.</td></tr></tbody></table><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> ex2_5(<br>    COL_DATE <span class="hljs-type">DATE</span><br>    ,COL_TIMESTAMP <span class="hljs-type">TIMESTAMP</span><br>);<br></code></pre></td></tr></table></figure><p><code>SYSDATE</code>와 <code>SYSTIMESTAMP</code>는 현재 일자와 시간을 반환하는 오라클 내부 함수 이다.</p><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs n1ql"><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> ex2_5 <span class="hljs-keyword">VALUES</span> (SYSDATE, SYSTIMESTAMP);<br></code></pre></td></tr></table></figure><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs n1ql"><span class="hljs-keyword">SELECT</span> * <span class="hljs-keyword">FROM</span> ex2_5;<br></code></pre></td></tr></table></figure><p><img src="https://user-images.githubusercontent.com/65166786/165050763-00f05529-e157-44c3-b322-ae1fc8f43d22.png" alt="image"></p><h2 id="제약-조건"><a href="#제약-조건" class="headerlink" title="제약 조건"></a>제약 조건</h2><h3 id="NOT-NULL"><a href="#NOT-NULL" class="headerlink" title="NOT NULL"></a>NOT NULL</h3><p>Column에 <code>NOT NULL</code> 제약조건을 명시할 경우 반드시 데이터를 입력해야 한다.</p><figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs lisp">CREATE TABLE ex2_6 (<br>    <span class="hljs-name">COL_NULL</span> VARCHAR2(<span class="hljs-number">10</span>)<br>    ,COL_NOT_NULL VARCHAR2(<span class="hljs-number">10</span>) NOT NULL<br>)<span class="hljs-comment">;</span><br></code></pre></td></tr></table></figure><p> 테이블에 데이터를 삽입한다.</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> ex2_6 <span class="hljs-keyword">VALUES</span> (<span class="hljs-string">&#x27;AA&#x27;</span>, <span class="hljs-string">&#x27; &#x27;</span>); <span class="hljs-comment">-- null 값 테스트</span><br><br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> ex2_6 <span class="hljs-keyword">VALUES</span> (<span class="hljs-string">&#x27;AA&#x27;</span>, <span class="hljs-string">&#x27;BB&#x27;</span>);<br></code></pre></td></tr></table></figure><p><img src="https://user-images.githubusercontent.com/65166786/165197677-a0fbfe77-a504-4cb0-881f-8c8ae212c703.png" alt="image"><br>첫번째 코드를 실행하면<br>“ORA-01400: NULL을 (“ORA_USER”.”EX2_6”.”COL_NOT_NULL”) 안에 삽입할 수 없습니다” 라는 오류가 발생한다. NOT_NULL 값의 경우<br>NULL 값을 넣을 수 없기에 발생하는 오류이다.</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">SELECT</span> <span class="hljs-built_in">constraint_name</span>, constraint_type, <span class="hljs-built_in">table_name</span>, search_condition<br>    <span class="hljs-keyword">FROM</span> user_constraints<br><span class="hljs-keyword">WHERE</span> <span class="hljs-built_in">table_name</span> = <span class="hljs-string">&#x27;EX2_6&#x27;</span>;<br></code></pre></td></tr></table></figure><p><img src="https://user-images.githubusercontent.com/65166786/165195636-d8dbfe14-adbb-4121-829d-52a93ee740d4.png" alt="image"></p><h3 id="UNIQUE"><a href="#UNIQUE" class="headerlink" title="UNIQUE"></a>UNIQUE</h3><p>Column에 UNIQUE을 명시할 경우, 같은 내용을 입력할 수 없다.</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> ex2_7 (<br>    COL_UNIQUE_NULL VARCHAR2(<span class="hljs-number">10</span>) <span class="hljs-keyword">UNIQUE</span><br>    ,COL_UNIQUE_NNULL VARCHAR2(<span class="hljs-number">10</span>) <span class="hljs-keyword">UNIQUE</span> <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span><br>    ,COL_UNIQUE VARCHAR2(<span class="hljs-number">10</span>)<br>    ,CONSTRAINTS unique_nm1 <span class="hljs-keyword">UNIQUE</span> (COL_UNIQUE)<br>);<br></code></pre></td></tr></table></figure><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">SELECT</span> <span class="hljs-built_in">constraint_name</span>, constraint_type, <span class="hljs-built_in">table_name</span>, search_condition<br>    <span class="hljs-keyword">FROM</span> user_constraints<br><span class="hljs-keyword">WHERE</span> <span class="hljs-built_in">table_name</span> = <span class="hljs-string">&#x27;EX2_7&#x27;</span>;<br></code></pre></td></tr></table></figure><p>같은 내용의 key값을 두 번 삽입한다 .</p><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs n1ql"><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> ex2_7 <span class="hljs-keyword">VALUES</span> (<span class="hljs-string">&#x27;AA&#x27;</span>, <span class="hljs-string">&#x27;AA&#x27;</span>, <span class="hljs-string">&#x27;AA&#x27;</span>);<br></code></pre></td></tr></table></figure><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs n1ql"><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> ex2_7 <span class="hljs-keyword">VALUES</span> (<span class="hljs-string">&#x27;AA&#x27;</span>, <span class="hljs-string">&#x27;AA&#x27;</span>, <span class="hljs-string">&#x27;AA&#x27;</span>);<br></code></pre></td></tr></table></figure><p><img src="https://user-images.githubusercontent.com/65166786/165197586-9bf4ac36-4d9d-4ebc-bc29-3b873b7d33c5.png" alt="image"><br>첫번째 코드를 실행한 뒤 두번째 코드를 실행하면<br> “ORA-00001: 무결성 제약 조건(ORA_USER.SYS_C007451)에 위배됩니다” 라는 에러 메시지가 발생한다. 같은 내용의 key값을 삽입하면 발생하는 오류이다. 테이블 내에 같은 내용이 없는지 확인해봐야 한다.</p><p> 이번에는 같은 내용의 NULL값을 두 번 삽입한다.</p><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs n1ql"><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> ex2_7 <span class="hljs-keyword">VALUES</span> (<span class="hljs-string">&#x27;&#x27;</span>, <span class="hljs-string">&#x27;BB&#x27;</span>, <span class="hljs-string">&#x27;BB&#x27;</span>);<br></code></pre></td></tr></table></figure><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs n1ql"><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> ex2_7 <span class="hljs-keyword">VALUES</span> (<span class="hljs-string">&#x27;&#x27;</span>,<span class="hljs-string">&#x27;CC&#x27;</span>, <span class="hljs-string">&#x27;CC&#x27;</span>);<br></code></pre></td></tr></table></figure><p>NULL 값의 경우 같은 내용을 두 번 삽입하여도 UNIQUE 비교 대상에서<br>제외되는 것을 확인 할 수 있다.</p><h3 id="Primary-key"><a href="#Primary-key" class="headerlink" title="Primary key"></a>Primary key</h3><p>Column에 Primary key를 명시할 경우, Column은UNIQUE와 NOT NULL 속성을 동시에 가지게 된다.</p><figure class="highlight sas"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sas"><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> ex2_8 (<br>    COL1 VARCHAR2(10) <span class="hljs-keyword">PRIMARY</span> <span class="hljs-keyword">KEY</span>,<br>    COL2 VARCHAR2(10)<br>);<br></code></pre></td></tr></table></figure><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">SELECT</span> <span class="hljs-built_in">constraint_name</span>, constraint_type, <span class="hljs-built_in">table_name</span>, search_condition<br>    <span class="hljs-keyword">FROM</span> user_constraints<br><span class="hljs-keyword">WHERE</span> <span class="hljs-built_in">table_name</span> = <span class="hljs-string">&#x27;EX2_8&#x27;</span>;<br></code></pre></td></tr></table></figure><p>기본키는 <code>CONSTRAINT_TYPE</code>이 P(Primary key)로 생성된다.<br><img src="https://user-images.githubusercontent.com/65166786/165196463-5e2744e0-11e6-4b1a-9db3-0374b1c48a1b.png" alt="image"></p><p>기본키는 <code>NOT NULL</code> 속성이기에 <code>NULL</code> 값 입력이 불가능하다.</p><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs n1ql"><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> ex2_8 <span class="hljs-keyword">VALUES</span> (<span class="hljs-string">&#x27;&#x27;</span>, <span class="hljs-string">&#x27;AA&#x27;</span>);<br></code></pre></td></tr></table></figure><p>또한 값이 같은 데이터도 입력 불가능하다.</p><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs n1ql"><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> ex2_8 <span class="hljs-keyword">VALUES</span> (<span class="hljs-string">&#x27;AA&#x27;</span>, <span class="hljs-string">&#x27;AA&#x27;</span>); <br></code></pre></td></tr></table></figure><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs n1ql"><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> ex2_8 <span class="hljs-keyword">VALUES</span> (<span class="hljs-string">&#x27;AA&#x27;</span>, <span class="hljs-string">&#x27;AA&#x27;</span>); <br></code></pre></td></tr></table></figure><h3 id="Foreign-key"><a href="#Foreign-key" class="headerlink" title="Foreign key"></a>Foreign key</h3><p>외래키는 테이블 간의 참조 데이터 무결성을 위한 제약조건이다.</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">CONSTRAINT</span> 외래키이름 <span class="hljs-keyword">FOREIGN</span> KEY (<span class="hljs-keyword">Column</span>이름..)<br><span class="hljs-keyword">REFERENCES</span> 참조테이블(참조테이블 <span class="hljs-keyword">Column</span>이름..)<br></code></pre></td></tr></table></figure><h3 id="Check"><a href="#Check" class="headerlink" title="Check"></a>Check</h3><p>check1은 CHECK 범위를 숫자 1~9만 입력 가능하도록 한다.<br>check2는 CHECK 범위를 <code>MALE</code>와 <code>FEMALE</code>만 입력 가능하도록 한다.</p><figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs lisp">CREATE TABLE ex2_9 (<br> <span class="hljs-name">num1</span> NUMBER <br> ,CONSTRAINTS check1 CHECK ( <span class="hljs-name">num1</span> BETWEEN <span class="hljs-number">1</span> AND <span class="hljs-number">9</span>)<br> ,gender VARCHAR2(<span class="hljs-number">10</span>)<br> ,CONSTRAINTS check2 CHECK ( <span class="hljs-name">gender</span> IN (&#x27;MALE&#x27;, &#x27;FEMALE&#x27;))        <br>)<span class="hljs-comment">; </span><br></code></pre></td></tr></table></figure><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">SELECT</span> <span class="hljs-built_in">constraint_name</span>, constraint_type, <span class="hljs-built_in">table_name</span>, search_condition<br>  <span class="hljs-keyword">FROM</span> user_constraints<br> <span class="hljs-keyword">WHERE</span> <span class="hljs-built_in">table_name</span> = <span class="hljs-string">&#x27;EX2_9&#x27;</span>;<br></code></pre></td></tr></table></figure><p><img src="https://user-images.githubusercontent.com/65166786/165213115-e2d42b43-f5d4-4a31-9c86-22351cd95f01.png" alt="image"><br> <figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs n1ql"><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> ex2_9 <span class="hljs-keyword">VALUES</span> (<span class="hljs-number">10</span>, <span class="hljs-string">&#x27;MAN&#x27;</span>);<br></code></pre></td></tr></table></figure><br> 숫자 <code>10</code>이 1~9의 범위를 벗어나고, <code>MAN</code>은 <code>MALE</code>이나 <code>FEMALE</code>이 아니기 때문에<br>“ORA-02290: 체크 제약조건(C##ORA_USER.CHECK4)이 위배되었습니다”라고 오류가 발생한다.<br><img src="https://user-images.githubusercontent.com/65166786/165211571-29a1ec60-670a-4903-90bb-784f7383a9ad.png" alt="image"><br> 데이터를 제약조건에 맞게 수정해주면 오류가 발생하지 않는다.<br> <figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs n1ql"><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> ex2_9 <span class="hljs-keyword">VALUES</span> (<span class="hljs-number">5</span>, <span class="hljs-string">&#x27;FEMALE&#x27;</span>);<br></code></pre></td></tr></table></figure></p><h3 id="Default"><a href="#Default" class="headerlink" title="Default"></a>Default</h3><p>제약조건에는 포함되지 않지만 Column 속성으로 <code>DEFAULT</code><br>가 존재한다. 이는 Column의 Default값을 명시하는데 사용된다. </p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> ex2_10 (<br>   Col1        VARCHAR2(<span class="hljs-number">10</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span>, <br>   Col2        VARCHAR2(<span class="hljs-number">10</span>) <span class="hljs-keyword">NULL</span>, <br>   Create_date <span class="hljs-type">DATE</span> <span class="hljs-keyword">DEFAULT</span> SYSDATE);<br></code></pre></td></tr></table></figure><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs n1ql"><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> ex2_10 (col1, col2) <span class="hljs-keyword">VALUES</span> (<span class="hljs-string">&#x27;AA&#x27;</span>, <span class="hljs-string">&#x27;AA&#x27;</span>); <br></code></pre></td></tr></table></figure><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs n1ql"><span class="hljs-keyword">SELECT</span> * <span class="hljs-keyword">FROM</span> ex2_10;<br></code></pre></td></tr></table></figure><p><img src="https://user-images.githubusercontent.com/65166786/165213728-86d7379d-8c5c-42e6-bce8-173e61f2c570.png" alt="image"><br><code>DEFAULT SYSDATE</code>를 해주었기에 따로 값을 넣지 않아도 현재 일자가 입력된다.</p><h2 id="Table-변경"><a href="#Table-변경" class="headerlink" title="Table 변경"></a>Table 변경</h2><h3 id="Table-요약"><a href="#Table-요약" class="headerlink" title="Table 요약"></a>Table 요약</h3><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs abnf">DESC ex2_10<span class="hljs-comment">;</span><br></code></pre></td></tr></table></figure><h3 id="Table-삭제"><a href="#Table-삭제" class="headerlink" title="Table 삭제"></a>Table 삭제</h3><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">DROP</span> <span class="hljs-keyword">TABLE</span> ex2_10;<br></code></pre></td></tr></table></figure><h3 id="Table-Column-Name-변경"><a href="#Table-Column-Name-변경" class="headerlink" title="Table Column Name 변경"></a>Table Column Name 변경</h3><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> ex2_10 <span class="hljs-keyword">RENAME</span> <span class="hljs-keyword">COLUMN</span> Col1 <span class="hljs-keyword">TO</span> Col11; <br></code></pre></td></tr></table></figure><h3 id="Table-Column-타입-변경"><a href="#Table-Column-타입-변경" class="headerlink" title="Table Column 타입 변경"></a>Table Column 타입 변경</h3><figure class="highlight sas"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sas"><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> ex2_10 <span class="hljs-keyword">MODIFY</span> col2 VARCHAR2(30);<br></code></pre></td></tr></table></figure><h3 id="Table-Column-추가"><a href="#Table-Column-추가" class="headerlink" title="Table Column 추가"></a>Table Column 추가</h3><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> ex2_10 <span class="hljs-keyword">ADD</span> col3 NUMBER;<br></code></pre></td></tr></table></figure><h3 id="Table-Column-삭제"><a href="#Table-Column-삭제" class="headerlink" title="Table Column 삭제"></a>Table Column 삭제</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> ex2_10 <span class="hljs-keyword">DROP</span> <span class="hljs-keyword">COLUMN</span> col3 ;<br></code></pre></td></tr></table></figure><h3 id="Table-Column-제약조건-추가"><a href="#Table-Column-제약조건-추가" class="headerlink" title="Table Column 제약조건 추가"></a>Table Column 제약조건 추가</h3><figure class="highlight sas"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sas"><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> ex2_10 <span class="hljs-keyword">ADD</span> CONSTRAINTS pk_ex2_10 <span class="hljs-keyword">PRIMARY</span> <span class="hljs-keyword">KEY</span> (col11); <br></code></pre></td></tr></table></figure><h3 id="Table-Column-제약조건-삭제"><a href="#Table-Column-제약조건-삭제" class="headerlink" title="Table Column 제약조건 삭제"></a>Table Column 제약조건 삭제</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> ex2_10 <span class="hljs-keyword">DROP</span> CONSTRAINTS pk_ex2_10; <span class="hljs-comment">-- 제약조건 삭제 </span><br></code></pre></td></tr></table></figure><h3 id="Table-복사"><a href="#Table-복사" class="headerlink" title="Table 복사"></a>Table 복사</h3><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> ex2_10_1 <span class="hljs-keyword">AS</span><br><span class="hljs-keyword">SELECT</span> * <span class="hljs-keyword">FROM</span> ex2_10_1;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Oracle</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Oracle</tag>
      
      <tag>SQL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>﻿BeautifulSoup를 이용한 Python 텍스트 웹 크롤링</title>
    <link href="/2022/04/22/%ED%8C%8C%EC%9D%B4%EC%8D%AC%20%EC%9D%B4%EB%AF%B8%EC%A7%80%20%EC%9B%B9%20%ED%81%AC%EB%A1%A4%EB%A7%81/"/>
    <url>/2022/04/22/%ED%8C%8C%EC%9D%B4%EC%8D%AC%20%EC%9D%B4%EB%AF%B8%EC%A7%80%20%EC%9B%B9%20%ED%81%AC%EB%A1%A4%EB%A7%81/</url>
    
    <content type="html"><![CDATA[<h1 id="네이버-랭킹뉴스-웹-크롤링"><a href="#네이버-랭킹뉴스-웹-크롤링" class="headerlink" title="네이버 랭킹뉴스 웹 크롤링"></a>네이버 랭킹뉴스 웹 크롤링</h1><p>네이버 랭킹 뉴스는 사람들이 어떤 이슈에 가장 많은 관심을 보이는지를 쉽게 파악 할 수 있기에<br>해당 페이지를 크롤링하면 무언가 의미있지 않을까.. </p><h2 id="기사-제목만-가져오기"><a href="#기사-제목만-가져오기" class="headerlink" title="기사 제목만 가져오기"></a>기사 제목만 가져오기</h2><p>네이버 랭킹뉴스에 가보면 수많은 기사들의 제목들이 보인다.<br><img src="https://user-images.githubusercontent.com/65166786/164966778-74f9e95f-553c-464d-91a0-041f6e94c060.png" alt="image"></p><p>이러한 기사들의 제목만 가져오는 텍스트 크롤링을 해본다.</p><p>일단 하단의 코드로 네이버 랭킹뉴스를 크롤링 대상으로 잡아준다.</p><figure class="highlight gradle"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><pre><code class="hljs gradle"><span class="hljs-keyword">import</span> requests  <br><span class="hljs-keyword">from</span> bs4 <span class="hljs-keyword">import</span> BeautifulSoup<br><span class="hljs-keyword">def</span> main():<br><br>headers = &#123; <br><span class="hljs-string">&#x27;user-agent&#x27;</span>: <span class="hljs-string">&#x27;Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/100.0.4896.127 Safari/537.36&#x27;</span>  <br>&#125;<br>url = <span class="hljs-string">&quot;https://news.naver.com/main/ranking/popularDay.naver&quot;</span><br></code></pre></td></tr></table></figure><p>그리고 요청을 보낸뒤 파싱을 한다.</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs routeros">req = requests.<span class="hljs-built_in">get</span>(<span class="hljs-attribute">url</span>=url, <span class="hljs-attribute">headers</span>=headers)<br><span class="hljs-built_in">print</span>(req.status_code) # 200이면 정상이다.<br>soup = BeautifulSoup(req.text, <span class="hljs-string">&#x27;html.parser&#x27;</span>)<br></code></pre></td></tr></table></figure><p>랭킹 뉴스는 각 언론사별 카드 뉴스의 형태로 되어 있는데, 이를 분석해보면<br><code>rankingnews_box</code>라는 코드로 되어있다는 것을 알 수 있다.<br>이를 찾아서 <code>ranking_boxes</code>라는 변수에 넣어준다.</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-attr">ranking_boxes</span> = soup.find_all(<span class="hljs-string">&#x27;div&#x27;</span>, <span class="hljs-string">&#x27;rankingnews_box&#x27;</span>)<br></code></pre></td></tr></table></figure><p>각 언론사별로 기사 제목만 수집하여 <code>rankingnewstitle</code> 리스트에 넣는다.</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs routeros">rankingnewstitle = [] # 빈 리스트 생성 <br><span class="hljs-keyword">for</span> rankingbox <span class="hljs-keyword">in</span> ranking_boxes:  <br>    article_list = rankingbox.<span class="hljs-built_in">find</span>(<span class="hljs-string">&quot;ul&quot;</span>, <span class="hljs-string">&quot;rankingnews_list&quot;</span>).find_all(<span class="hljs-string">&quot;li&quot;</span>)  <br>    <span class="hljs-keyword">for</span> article <span class="hljs-keyword">in</span> article_list:  <br>        content = article.<span class="hljs-built_in">find</span>(<span class="hljs-string">&quot;div&quot;</span>, <span class="hljs-string">&quot;list_content&quot;</span>)  <br>        # 각 언론사별로 기사 제목 수집해서 ranking_news_titles에 삽입  <br>  <span class="hljs-keyword">if</span> content:  <br>            rankingnewstitle.append(content.<span class="hljs-built_in">find</span>(<span class="hljs-string">&quot;a&quot;</span>).text)<br></code></pre></td></tr></table></figure><p>  <code>rankingnewstitle</code> 리스트를 출력한다.</p><figure class="highlight dos"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs dos"><span class="hljs-keyword">for</span> <span class="hljs-built_in">title</span> <span class="hljs-keyword">in</span> rankingnewstitle:  <br>   <span class="hljs-built_in">print</span>(<span class="hljs-built_in">title</span>)<br></code></pre></td></tr></table></figure><p>완성된 코드</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs routeros">import requests  <br><span class="hljs-keyword">from</span> bs4 import BeautifulSoup  <br>  <br>def main():  <br>    headers = &#123;  <br>        <span class="hljs-string">&#x27;user-agent&#x27;</span>: <span class="hljs-string">&#x27;Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/100.0.4896.127 Safari/537.36&#x27;</span>  <br>  &#125;  <br>    url = <span class="hljs-string">&#x27;https://news.naver.com/main/ranking/popularDay.naver&#x27;</span>  <br>  req = requests.<span class="hljs-built_in">get</span>(<span class="hljs-attribute">url</span>=url, <span class="hljs-attribute">headers</span>=headers)  <br>    <span class="hljs-built_in">print</span>(req.status_code)  <br>    soup = BeautifulSoup(req.text, <span class="hljs-string">&#x27;html.parser&#x27;</span>)  <br>    <br>def crawling(soup):  <br>    ranking_boxes = soup.find_all(<span class="hljs-string">&#x27;div&#x27;</span>, <span class="hljs-string">&#x27;rankingnews_box&#x27;</span>)  # class_인 이유는 python 내장변수인 class와 구별 위함  <br>  rankingnewstitle = []  <br>    <span class="hljs-keyword">for</span> rankingbox <span class="hljs-keyword">in</span> ranking_boxes:  <br>        article_list = rankingbox.<span class="hljs-built_in">find</span>(<span class="hljs-string">&quot;ul&quot;</span>, <span class="hljs-string">&quot;rankingnews_list&quot;</span>).find_all(<span class="hljs-string">&quot;li&quot;</span>)  <br>        <span class="hljs-keyword">for</span> arti <span class="hljs-keyword">in</span> article_list:  <br>            content = arti.<span class="hljs-built_in">find</span>(<span class="hljs-string">&quot;div&quot;</span>, <span class="hljs-string">&quot;list_content&quot;</span>)  <br>            # 각 언론사별로 기사 제목 수집해서 ranking_news_titles에 삽입  <br> <span class="hljs-keyword">if</span> content:  <br>  rankingnewstitle.append(content.<span class="hljs-built_in">find</span>(<span class="hljs-string">&quot;a&quot;</span>).text)  <br>    <span class="hljs-keyword">for</span> title <span class="hljs-keyword">in</span> rankingnewstitle:  <br>        <span class="hljs-built_in">print</span>(title)  <br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&quot;__main__&quot;</span>:  <br>    main()<br></code></pre></td></tr></table></figure><p>실행 시 이렇게 제목만 가져오는 것을 확인할 수 있다.<br><img src="https://user-images.githubusercontent.com/65166786/164975681-cc2a5d8c-6330-44fc-94be-888ed2c54894.png" alt="출력 결과"></p><h2 id="제목과-내용-둘-다-가져오기"><a href="#제목과-내용-둘-다-가져오기" class="headerlink" title="제목과 내용 둘 다 가져오기"></a>제목과 내용 둘 다 가져오기</h2><p>기사 제목과 내용간의 괴리감이 있을 경우를 생각해서, 내용을 가져와보도록 한다.<br>제목과 달리 내용은 링크를 열어야 볼 수 있으므로, 링크를 연 뒤 내용을 가져오는 코드가 추가로 필요하다.<br>링크를 저장할 리스트를 추가로 만든 뒤</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs abnf"><span class="hljs-attribute">rankinglink</span> <span class="hljs-operator">=</span> [ ]<br></code></pre></td></tr></table></figure><p>기사 제목을 수집하는 코드인  <code>rankingnewstitle.append</code> 밑에 <code>rankinglink.append</code>를 추가하여 링크도 수집하게 만든다.</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs css">if <span class="hljs-attribute">content</span>:  <br>            rankingnewstitle.<span class="hljs-built_in">append</span>(content.<span class="hljs-built_in">find</span>(<span class="hljs-string">&quot;a&quot;</span>).text)<br>        rankinglink.<span class="hljs-built_in">append</span>(content.<span class="hljs-built_in">find</span>(<span class="hljs-string">&quot;a&quot;</span>)[<span class="hljs-string">&quot;href&quot;</span>])<br></code></pre></td></tr></table></figure><p>기사 제목과 내용을 함께 저장할 리스트를 만든다.</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs abnf"><span class="hljs-attribute">news</span>  <span class="hljs-operator">=</span> [ ]<br></code></pre></td></tr></table></figure><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs applescript"><span class="hljs-keyword">for</span> title, link <span class="hljs-keyword">in</span> zip(ranking_news_titles, ranking_news_links):  <br>    url = f<span class="hljs-string">&quot;https://news.naver.com&#123;link&#125;&quot;</span> <span class="hljs-comment"># 링크를 완전하게 만든다.  </span><br>  r = requests.<span class="hljs-keyword">get</span>(url, headers=headers)  <br>    <span class="hljs-built_in">time</span>.sleep(<span class="hljs-number">0.5</span>)  <span class="hljs-comment"># 한 번에 너무 많은 요청이 들어오면 네이버에서 IP차단 시킬수도</span><br> <span class="hljs-comment"># 이제 기사 원문을 파싱해보자.  </span><br>  soup = BeautifulSoup(r.<span class="hljs-built_in">text</span>, <span class="hljs-string">&quot;html.parser&quot;</span>)  <br>    article_body = soup.find(<span class="hljs-string">&quot;div&quot;</span>, <span class="hljs-built_in">id</span>=<span class="hljs-string">&quot;articleBodyContents&quot;</span>)  <br>    article_body = article_body.<span class="hljs-built_in">text</span>.strip()  <br>    <span class="hljs-comment"># 파싱한 원문을 articles에 삽입한다. </span><br>  articles.append(  <br>        &#123;  <br>            <span class="hljs-string">&quot;title&quot;</span>: title,  <br>  <span class="hljs-string">&quot;content&quot;</span>: article_body  <br>        &#125;  <br>    )<br></code></pre></td></tr></table></figure><p>이러면 결과가 나와야하는데.. 너무 많은 요청을 전송해서<br><code>requests.exceptions.ConnectionError</code> 에러가 발생했다.<br>나중에 해결하는걸로..</p>]]></content>
    
    
    <categories>
      
      <category>Python</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Python</tag>
      
      <tag>Beautifulsoup</tag>
      
      <tag>Web crawling</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>BeautifulSoup</title>
    <link href="/2022/04/21/BeautifulSoup/"/>
    <url>/2022/04/21/BeautifulSoup/</url>
    
    <content type="html"><![CDATA[<h1 id="BeautifulSoup를-이용한-웹-크롤링"><a href="#BeautifulSoup를-이용한-웹-크롤링" class="headerlink" title="BeautifulSoup를 이용한 웹 크롤링"></a>BeautifulSoup를 이용한 웹 크롤링</h1><h2 id="BeautifulSoup-설치"><a href="#BeautifulSoup-설치" class="headerlink" title="BeautifulSoup 설치"></a>BeautifulSoup 설치</h2><p>beautifulsoup를 설치한다.</p><figure class="highlight cmake"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><pre><code class="hljs cmake">pip  <span class="hljs-keyword">install</span>  beautifulsoup4<br></code></pre></td></tr></table></figure><p> <code>BeautifulSoup</code> 를 불러 온다.<br> requests는 데이터를 전송할 때 딕셔너리 형태로 내보낸다.<br>만약 존재하지 않는 페이지를 요청해도 500,404등의 에러를 반환하지 않는다.</p><figure class="highlight elm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs elm"><span class="hljs-keyword">import</span> requests <br><span class="hljs-title">from</span> bs4 <span class="hljs-keyword">import</span> BeautifulSoup <br></code></pre></td></tr></table></figure><h2 id="기본-코드-알아보기"><a href="#기본-코드-알아보기" class="headerlink" title="기본 코드 알아보기"></a>기본 코드 알아보기</h2><figure class="highlight dos"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dos">soup.<span class="hljs-built_in">title</span><br></code></pre></td></tr></table></figure><p>웹 문서의 타이틀을 가져온다.</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">soup.p<br></code></pre></td></tr></table></figure><p>웹 문서의 <code>&lt;p&gt;</code> 태그를 가져온다.</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">soup.find<span class="hljs-constructor">_all(&#x27;<span class="hljs-params">p</span>&#x27;)</span><br></code></pre></td></tr></table></figure><p>웹 문서 전체의<code>&lt;p&gt;</code>태그를 모두 출력한다.</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">soup.<span class="hljs-built_in">find</span>(<span class="hljs-attribute">id</span>=<span class="hljs-string">&quot;link3&quot;</span>)<br></code></pre></td></tr></table></figure><p>웹 문서에서 가장 처음으로 발견되는 <code>id=&quot;link3&quot;</code>을 출력한다.</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-keyword">for</span> link <span class="hljs-keyword">in</span> soup.find_all(<span class="hljs-string">&#x27;a&#x27;</span>):<br>    <span class="hljs-built_in">print</span>(link.<span class="hljs-built_in">get</span>(<span class="hljs-string">&#x27;href&#x27;</span>))<br></code></pre></td></tr></table></figure><p>웹 페이지 내의 <code>&lt;a&gt;</code> 태그 내에 있는 모든 URL을 추출 한다.</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-function"><span class="hljs-title">print</span><span class="hljs-params">(soup.get_text()</span></span>)<br></code></pre></td></tr></table></figure><p>웹 페이지 내의 모든 텍스트를 추출 한다.</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-function"><span class="hljs-title">print</span><span class="hljs-params">(soup.prettify()</span></span>)<br></code></pre></td></tr></table></figure><p>코드를 정리하여 출력한다.</p>]]></content>
    
    
    <categories>
      
      <category>Python</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Python</tag>
      
      <tag>Beautifulsoup</tag>
      
      <tag>Web crawling</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Ubuntu 20.04에 Kafka 설치 및 환경 구성</title>
    <link href="/2022/04/20/Kafka/"/>
    <url>/2022/04/20/Kafka/</url>
    
    <content type="html"><![CDATA[<h1 id="Kafka-설치-및-환경-구성"><a href="#Kafka-설치-및-환경-구성" class="headerlink" title="Kafka 설치 및 환경 구성"></a>Kafka 설치 및 환경 구성</h1><h2 id="kafka-설치"><a href="#kafka-설치" class="headerlink" title="kafka 설치"></a>kafka 설치</h2><p>보안을 위해 kafka 계정을 따로 만든다.</p><figure class="highlight mipsasm"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><pre><code class="hljs mipsasm">sudo <span class="hljs-keyword">adduser </span>kafka<br>sudo <span class="hljs-keyword">adduser </span>kafka sudo<br>su -l kafka<br></code></pre></td></tr></table></figure><p>kafka 계정을 생성하고, sudo group에 추가함으로써, sudoer 권한을 부여한다.<br>그 다음 kafka 계정으로 로그인한다.</p><h2 id="kafka-다운로드"><a href="#kafka-다운로드" class="headerlink" title="kafka 다운로드"></a>kafka 다운로드</h2><p><a href="https://kafka.apache.org/downloads">kafka 공식 사이트</a>에 방문하여 binary를 다운 받는다. </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">wget https://dlcdn.apache.org/kafka/3.1.0/kafka_2.12-3.1.0.tgz</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">tar -xvzf kafka_2.12-3.1.0.tgz</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash"><span class="hljs-built_in">mv</span> kafka_2.12-3.1.0 kafka</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash"><span class="hljs-built_in">cd</span> kafka</span><br></code></pre></td></tr></table></figure><p>kafka topic 으로 message를 발행하게 되어있으나, topic은 기본적으로 지울 수 없게 되어있다. </p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs arcade">$ vi ~<span class="hljs-regexp">/kafka/</span>config/server.properties<br></code></pre></td></tr></table></figure><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs clean">###########################<br># topic을 삭제할 수 있게 한다.<br>delete.topic.enable = true<br># log path를 변경한다.<br>log.dirs=/home/kafka/logs<br></code></pre></td></tr></table></figure><p>vi 편집기로 상단의 코드를 추가하여, topic 삭제 및 log path를 변경한다.</p><h2 id="실행"><a href="#실행" class="headerlink" title="실행"></a>실행</h2><p>먼저 zookeeper를 실행한다.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ bin/zookeeper-server-start.sh config/zookeeper.properties<br></code></pre></td></tr></table></figure><p>그 다음 다른 터미널을 열고 kafka를 실행한다.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ bin/kafka-server-start.sh config/server.properties<br></code></pre></td></tr></table></figure><h2 id="테스트"><a href="#테스트" class="headerlink" title="테스트"></a>테스트</h2><p>quickstart-events이라는 새로운 토픽을 생성한다.</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus">bin/kafka-topics<span class="hljs-selector-class">.sh</span> <span class="hljs-attr">--create</span> <span class="hljs-attr">--topic</span> quickstart-events <span class="hljs-attr">--bootstrap-server</span> localhost:<span class="hljs-number">9092</span><br></code></pre></td></tr></table></figure><p>quickstart-events 토픽의 대략적인 정보를 파악한다.</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus">bin/kafka-topics<span class="hljs-selector-class">.sh</span> <span class="hljs-attr">--describe</span> <span class="hljs-attr">--topic</span> quickstart-events <span class="hljs-attr">--bootstrap-server</span> localhost:<span class="hljs-number">9092</span><br></code></pre></td></tr></table></figure><p>quickstart-events 토픽에 메시지를 입력한다.</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus">bin/kafka-console-producer<span class="hljs-selector-class">.sh</span> <span class="hljs-attr">--topic</span> quickstart-events <span class="hljs-attr">--bootstrap-server</span> localhost:<span class="hljs-number">9092</span><br></code></pre></td></tr></table></figure><p>quickstart-events 토픽에 입력한 메시지를 본다.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">bin/kafka-console-consumer.sh --topic quickstart-events --from-beginning --bootstrap-server localhost:9092<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Setting</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Setting</tag>
      
      <tag>Kafka</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Ubuntu 20.04에 Hadoop 설치 및 환경 구성</title>
    <link href="/2022/04/16/hadoop%20%EC%84%A4%EC%B9%98/"/>
    <url>/2022/04/16/hadoop%20%EC%84%A4%EC%B9%98/</url>
    
    <content type="html"><![CDATA[<h1 id="Hadoop-설치하기-및-환경-구성하기"><a href="#Hadoop-설치하기-및-환경-구성하기" class="headerlink" title="Hadoop 설치하기 및 환경 구성하기"></a>Hadoop 설치하기 및 환경 구성하기</h1><h2 id="JAVA-설치"><a href="#JAVA-설치" class="headerlink" title="JAVA 설치"></a>JAVA 설치</h2><figure class="highlight crystal"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><pre><code class="hljs crystal"><span class="hljs-variable">$ </span>sudo apt update<br><span class="hljs-variable">$ </span>sudo apt install openjdk-<span class="hljs-number">11</span>-jdk<br><span class="hljs-variable">$ </span>java -version<br></code></pre></td></tr></table></figure><p>상단의 코드를 실행하여 자바를 설치한 후, 제대로 설치되었는지 확인한다.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">vi ~/.bashrc</span><br></code></pre></td></tr></table></figure><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">export JAVA_HOME=<span class="hljs-regexp">/usr/</span>lib<span class="hljs-regexp">/jvm/</span>java-<span class="hljs-number">11</span>-openjdk-amd64<br></code></pre></td></tr></table></figure><p>제대로 설치되었다면, .bashrc 파일에 자바 환경변수를 추가해준다.</p><h2 id="SSH-설치"><a href="#SSH-설치" class="headerlink" title="SSH 설치"></a>SSH 설치</h2><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs routeros">sudo apt-<span class="hljs-built_in">get</span> install ssh<br>sudo apt-<span class="hljs-built_in">get</span> install pdsh<br></code></pre></td></tr></table></figure><h2 id="ssh-키-생성-및-권한-부여"><a href="#ssh-키-생성-및-권한-부여" class="headerlink" title="ssh 키 생성 및 권한 부여"></a>ssh 키 생성 및 권한 부여</h2><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs awk">$ sudo chmod -R <span class="hljs-number">777</span> <span class="hljs-regexp">/home/</span>huisu/.bashrc <br>$ ssh-keygen -t rsa -P <span class="hljs-string">&quot;&quot;</span> <br>$ cat ~<span class="hljs-regexp">/.ssh/i</span>d_rsa.pub &gt;&gt; ~<span class="hljs-regexp">/.ssh/</span>authorized_keys <br>$ ssh localhost <br><span class="hljs-keyword">exit</span> <br>$ sudo apt-get update  <br></code></pre></td></tr></table></figure><h2 id="Hadoop-다운로드-및-압축해제"><a href="#Hadoop-다운로드-및-압축해제" class="headerlink" title="Hadoop 다운로드 및 압축해제"></a>Hadoop 다운로드 및 압축해제</h2><p><a href="https://hadoop.apache.org/releases.html">Hadoop 공식 다운로드 사이트</a>에 접속하여 원하는 버전을 binary로 다운 받은 후 압축을 해제한다.</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs awk">$ wget https:<span class="hljs-regexp">//</span>dlcdn.apache.org<span class="hljs-regexp">/hadoop/</span>common<span class="hljs-regexp">/hadoop-3.3.2/</span>hadoop-<span class="hljs-number">3.3</span>.<span class="hljs-number">2</span>.tar.gz<br>$ tar zxf hadoof-<span class="hljs-number">3.3</span>.<span class="hljs-number">2</span>.tar.gz <br></code></pre></td></tr></table></figure><h2 id="Hadoop-설정하기"><a href="#Hadoop-설정하기" class="headerlink" title="Hadoop 설정하기"></a>Hadoop 설정하기</h2><h3 id="bashrc"><a href="#bashrc" class="headerlink" title="bashrc"></a>bashrc</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">vi ~/.bashrc</span><br></code></pre></td></tr></table></figure><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-built_in">export</span> <span class="hljs-attribute">HADOOP_HOME</span>=<span class="hljs-string">&quot;/home/huisu/hadoop&quot;</span><br><span class="hljs-built_in">export</span> <span class="hljs-attribute">HADOOP_INSTALL</span>=<span class="hljs-variable">$HADOOP_HOME</span><br><span class="hljs-built_in">export</span> <span class="hljs-attribute">HADOOP_MAPRED_HOME</span>=<span class="hljs-variable">$&#123;HADOOP_HOME&#125;</span><br><span class="hljs-built_in">export</span> <span class="hljs-attribute">HADOOP_COMMON_HOME</span>=<span class="hljs-variable">$&#123;HADOOP_HOME&#125;</span><br><span class="hljs-built_in">export</span> <span class="hljs-attribute">HADOOP_HDFS_HOME</span>=<span class="hljs-variable">$&#123;HADOOP_HOME&#125;</span><br><span class="hljs-built_in">export</span> <span class="hljs-attribute">YARN_HOME</span>=<span class="hljs-variable">$&#123;HADOOP_HOME&#125;</span><br><span class="hljs-built_in">export</span> <span class="hljs-attribute">HADOOP_COMMON_LIB_NATIVE_DIR</span>=<span class="hljs-variable">$HADOOP_HOME</span>/lib/native<br><span class="hljs-built_in">export</span> <span class="hljs-attribute">PATH</span>=<span class="hljs-variable">$PATH</span>:$HADOOP_HOME/bin<br><span class="hljs-built_in">export</span> <span class="hljs-attribute">PATH</span>=<span class="hljs-variable">$PATH</span>:$HADOOP_HOME/sbin<br><span class="hljs-built_in">export</span> <span class="hljs-attribute">PDSH_RCMD_TYPE</span>=ssh<br></code></pre></td></tr></table></figure><p>.bashrc 파일에 환경변수를 추가해준다.</p><h3 id="hadoop-env-sh"><a href="#hadoop-env-sh" class="headerlink" title="hadoop-env.sh"></a>hadoop-env.sh</h3><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">$ vi <span class="hljs-variable">$HADOOP_HOME</span><span class="hljs-regexp">/etc/</span>hadoop/hadoop-env.sh <br></code></pre></td></tr></table></figure><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">export JAVA_HOME=<span class="hljs-regexp">/usr/</span>lib<span class="hljs-regexp">/jvm/</span>java-<span class="hljs-number">11</span>-openjdk-amd64<br></code></pre></td></tr></table></figure><p><code>hadoop-env.sh</code>파일에 JAVA 환경변수를 추가해준다.</p><h3 id="core-site-xml"><a href="#core-site-xml" class="headerlink" title="core-site.xml"></a>core-site.xml</h3><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">$ vi <span class="hljs-variable">$HADOOP_HOME</span><span class="hljs-regexp">/etc/</span>hadoop/core-site.xml<br></code></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">property</span>&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>hadoop.tmp.dir<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>/home/huisu/hadoop/tmpdata<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span>&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>fs.default.name<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>hdfs://127.0.0.1:9000<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span><br></code></pre></td></tr></table></figure><p><code>core-site.xml</code>파일에 상단의 코드를 추가하며, 만약 <code>/home/huisu/hadoop/tmpdata</code> 해당 경로에 tmpdata 폴더가 존재하지 않을 경우 <code>mkdir</code>을 이용하여 폴더를 만들어주어야 한다.</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">mkdir -p <span class="hljs-regexp">/home/</span>huisu<span class="hljs-regexp">/hadoop/</span>tmpdata<br></code></pre></td></tr></table></figure><h3 id="hdfs-site-xml"><a href="#hdfs-site-xml" class="headerlink" title="hdfs-site.xml"></a>hdfs-site.xml</h3><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">$ vi <span class="hljs-variable">$HADOOP_HOME</span><span class="hljs-regexp">/etc/</span>hadoop/hdfs-site.xml<br></code></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">property</span>&gt;</span><br>         <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>dfs.data.dir<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br>         <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>/home/huisu/hadoop/hdfs/namenode<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">property</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>dfs.data.dir<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>/home/huisu/hadoop/hdfs/datanode<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">property</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>dfs.replication<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>1<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span><br></code></pre></td></tr></table></figure><p><code>hdfs-site.xml</code>파일에 상단의 코드를 추가하며, 만약 <code>/home/huisu/hdfs/namenode</code> <code>/home/huisu/hdfs/datanode</code>에 각각 namenode, datanode가 존재하지 않을 경우, <code>mkdir</code>을 이용하여 폴더를 만들어주어야 한다.</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs awk">mkdir -p <span class="hljs-regexp">/home/</span>huisu<span class="hljs-regexp">/hadoop/</span>hdfs/namenode <br>mkdir -p <span class="hljs-regexp">/home/</span>huisu<span class="hljs-regexp">/hadoop/</span>hdfs/datanode  <br></code></pre></td></tr></table></figure><h3 id="mapred-site-xml"><a href="#mapred-site-xml" class="headerlink" title="mapred-site.xml"></a>mapred-site.xml</h3><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">$ vi <span class="hljs-variable">$HADOOP_HOME</span><span class="hljs-regexp">/etc/</span>hadoop/mapred-site.xml<br></code></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">property</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>mapreduce.framework.name<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>yarn<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">property</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>yarn.app.mapreduce.am.env<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>HADOOP_MAPRED_HOME=/home/huisu/hadoop<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">property</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>mapreduce.map.env<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>HADOOP_MAPRED_HOME=/home/huisu/hadoop<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">property</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>mapreduce.reduce.env<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>HADOOP_MAPRED_HOME=/home/huisu/hadoop<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span><br></code></pre></td></tr></table></figure><p><code>mapred-site.xml</code>파일에 상단의 코드를 추가한다.</p><h3 id="yarn-site-xml"><a href="#yarn-site-xml" class="headerlink" title="yarn-site.xml"></a>yarn-site.xml</h3><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">$ vi <span class="hljs-variable">$HADOOP_HOME</span><span class="hljs-regexp">/etc/</span>hadoop/yarn-site.xml<br></code></pre></td></tr></table></figure><figure class="highlight bnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs bnf"> <span class="hljs-attribute">&lt;configuration&gt;</span><br>  <span class="hljs-attribute">&lt;!-- Site specific YARN configuration properties --&gt;</span><br>      <span class="hljs-attribute">&lt;property&gt;</span><br>         <span class="hljs-attribute">&lt;name&gt;</span>yarn.nodemanager.aux-services<span class="hljs-attribute">&lt;/name&gt;</span><br>         <span class="hljs-attribute">&lt;value&gt;</span>mapreduce_shuffle<span class="hljs-attribute">&lt;/value&gt;</span><br>      <span class="hljs-attribute">&lt;/property&gt;</span><br>      <span class="hljs-attribute">&lt;property&gt;</span><br>         <span class="hljs-attribute">&lt;name&gt;</span>yarn.nodemanager.aux-services.mapreduce.shuffle.class<span class="hljs-attribute">&lt;/name&gt;</span><br>         <span class="hljs-attribute">&lt;value&gt;</span>org.apache.hadoop.mapred.ShuffleHandler<span class="hljs-attribute">&lt;/value&gt;</span><br>      <span class="hljs-attribute">&lt;/property&gt;</span><br>      <span class="hljs-attribute">&lt;!--</span><br><span class="hljs-attribute">      &lt;property&gt;</span> <br>     <span class="hljs-attribute">&lt;name&gt;</span>yarn.resourcemanager.hostname<span class="hljs-attribute">&lt;/name&gt;</span><br>     <span class="hljs-attribute">&lt;value&gt;</span>127.0.0.1<span class="hljs-attribute">&lt;/value&gt;</span>  <br>  <span class="hljs-attribute">&lt;/property&gt;</span><br>  <span class="hljs-attribute">&lt;property&gt;</span> <br><span class="hljs-attribute">&lt;name&gt;</span>yarn.acl.enable<span class="hljs-attribute">&lt;/name&gt;</span> <br>    <span class="hljs-attribute">&lt;value&gt;</span>0<span class="hljs-attribute">&lt;/value&gt;</span> <br>     <span class="hljs-attribute">&lt;/property&gt;</span> <br>     <span class="hljs-attribute">&lt;property&gt;</span> <br>    <span class="hljs-attribute">&lt;name&gt;</span>yarn.nodemanager.env-whitelist<span class="hljs-attribute">&lt;/name&gt;</span>             <br>    <span class="hljs-attribute">&lt;value&gt;</span>JAVA_HOME,HADOOP_COMMON_HOME,HADOOP_HDFS_HOME,<br>    HADOOP_CONF_DIR,CLASSPATH_PERPEND_DISTCACHE,HADOOP_YARN_HOME,HADOOP_MAPRED_HOME<br>    <span class="hljs-attribute">&lt;/value&gt;</span> <br> <span class="hljs-attribute">&lt;/property&gt;</span><br><span class="hljs-attribute">&lt;/configuration&gt;</span><br></code></pre></td></tr></table></figure><p><code>yarn-site.xml</code>파일에 상단의 코드를 추가한다.</p><h2 id="Hadoop-실행하기"><a href="#Hadoop-실행하기" class="headerlink" title="Hadoop 실행하기"></a>Hadoop 실행하기</h2><p>NameNode를 한번 포맷 한다.(Hadoop 서비스를 처음 시작하기 전에 NameNode의 포맷이 중요하다.)</p><figure class="highlight dos"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dos">hdfs namenode -<span class="hljs-built_in">format</span><br></code></pre></td></tr></table></figure><p>NameNode 및 DataNode를 실행한다.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sbin/start-dfs.sh<br></code></pre></td></tr></table></figure><p><img src="https://user-images.githubusercontent.com/65166786/164246153-e43c1845-81c1-4c36-9e1b-019b81abdb21.png" alt="dfs"></p><p>YARN도 실행하여 확인해 준다.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sbin/start-yarn.sh<br></code></pre></td></tr></table></figure><p><img src="https://user-images.githubusercontent.com/65166786/164246320-f054fb8e-3888-4021-967a-b0b4ffb8466a.png" alt="yarn.sh"></p><p>모든 데몬이 활성 상태이고 프로그램이 JAVA 프로세스로 실행 중인지 확인한다.</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">jps</span><br></code></pre></td></tr></table></figure><p><img src="https://user-images.githubusercontent.com/65166786/164246356-b2f4a58f-81a4-45ec-b2c8-99f0be061f9f.png" alt="jps"></p><h2 id="웹에서-Hadoop-사용"><a href="#웹에서-Hadoop-사용" class="headerlink" title="웹에서 Hadoop 사용"></a>웹에서 Hadoop 사용</h2><h3 id="NameNode-UI"><a href="#NameNode-UI" class="headerlink" title="NameNode UI"></a>NameNode UI</h3><p>제대로 실행이 되었을 경우 <a href="http://localhost:9870로">http://localhost:9870로</a> 접속하면 아래와 같은 화면이 뜨는 것을 확인할 수 있다.<br>NameNode UI는 전체 클러스터에 대한 포괄적인 개요를 제공한다.<br><img src="https://user-images.githubusercontent.com/65166786/164247306-c6ea8d8e-2053-4ab0-96c3-adccfa88a18f.png" alt="NameNode UI"></p><p><a href="http://localhost:9864의">http://localhost:9864의</a> 경우 직접 개별 DataNode에 액세스하는데 사용된다.<br><img src="https://user-images.githubusercontent.com/65166786/164248281-2453456a-7454-46d1-abe6-f4efb8f396a7.png" alt="DataNode"></p><p>YARN Resource Manager의 경우 <a href="http://localhost:8088에서">http://localhost:8088에서</a> 가능하다.<br>Resource Manager는 Hadoop 클러스터에서 실행 중인 모든 프로세스를 모니터링할 수 있다.<br><img src="https://user-images.githubusercontent.com/65166786/164248932-6e4f9f36-ae95-4633-bb3c-2361600bd146.png" alt="image"></p>]]></content>
    
    
    <categories>
      
      <category>Setting</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Setting</tag>
      
      <tag>Hadoop</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Ubuntu 20.04에 Spark 설치 및 환경 구성</title>
    <link href="/2022/04/16/Spark/"/>
    <url>/2022/04/16/Spark/</url>
    
    <content type="html"><![CDATA[<p>﻿# Ubuntu 20.04에 spark 설치하기</p><h2 id="1-java-설치"><a href="#1-java-설치" class="headerlink" title="1. java 설치"></a>1. java 설치</h2><p>spark는 java를 이용하기 때문에 spark를 설치하기 전에 java를 먼저 설치해야 한다.</p><p>java 버전을 확인 할 수 있는 명령어를 이용해서 java가 설치 되어 있는지를 확인한다.</p><figure class="highlight applescript"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><pre><code class="hljs applescript">$ java -<span class="hljs-built_in">version</span><br></code></pre></td></tr></table></figure><p>java가 설치되어 있지 않은 경우 java를 설치 한다.<br> <figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">$ sudo apt-<span class="hljs-built_in">get</span> install openjdk-11-jdk-headless<br></code></pre></td></tr></table></figure></p><p>자바의 환경변수도 설정한다.  아래의 명령어를 통해 vi 편집기를 연다.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">vi ~/.bashrc</span><br></code></pre></td></tr></table></figure><p>그리고 아래의 경로를 붙여 넣는다.</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">export JAVA_HOME=<span class="hljs-regexp">/usr/</span>lib<span class="hljs-regexp">/jvm/</span>java-<span class="hljs-number">11</span>-openjdk-amd64<br></code></pre></td></tr></table></figure><h2 id="2-spark-설치"><a href="#2-spark-설치" class="headerlink" title="2. spark 설치"></a>2. spark 설치</h2><p>스파크 공식 다운로드 사이트에 접속하여 원하는 버전의 링크를 복사한 뒤 wget로 파일을 다운 받는다.</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">$ wget https:<span class="hljs-regexp">//</span>downloads.apache.org<span class="hljs-regexp">/spark/</span>spark-<span class="hljs-number">3.2</span>.<span class="hljs-number">1</span>/spark-<span class="hljs-number">3.2</span>.<span class="hljs-number">1</span>-bin-hadoop3.<span class="hljs-number">2</span>.tgz<br></code></pre></td></tr></table></figure><p>파일이 다운로드 되면 파일의 압축을 해제 한다.</p><figure class="highlight crystal"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs crystal"><span class="hljs-variable">$ </span>sudo tar -xf spark-<span class="hljs-number">3.2</span>.<span class="hljs-number">1</span>-bin-hadoop3.<span class="hljs-number">2</span>.tgz<br></code></pre></td></tr></table></figure><p>압축을 푼 spark 파일을 &#x2F;opt&#x2F;spark 경로로 옮긴다</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">sudo <span class="hljs-built_in">mv</span> spark-3.2.1-bin-hadoop3.2/ /opt/spark</span><br></code></pre></td></tr></table></figure><p>spark의 환경변수를 지정한다.</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-built_in">export</span> <span class="hljs-attribute">SPARK_HOME</span>=/opt/spark  <br><span class="hljs-built_in">export</span> <span class="hljs-attribute">PATH</span>=<span class="hljs-variable">$SPARK_HOME</span>/bin:$PATH<br><span class="hljs-built_in">export</span> <span class="hljs-attribute">PATH</span>=<span class="hljs-variable">$PATH</span>:$SPARK_HOME/bin:$SPARK_HOME/sbin<br><span class="hljs-built_in">export</span> <span class="hljs-attribute">PYSPARK_PYTHON</span>=/usr/bin/python3<br></code></pre></td></tr></table></figure><p>spark를 실행해본다.</p><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs elixir">huisu<span class="hljs-variable">@huisu</span><span class="hljs-symbol">:/opt/spark</span> <span class="hljs-variable">$ </span>bin/spark-shell<br></code></pre></td></tr></table></figure><p>아래처럼  웹 주소와 spark가 뜨면서 정상적으로 구동되는것을 확인 할 수 있다.</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs awk">Spark context Web UI available at http:<span class="hljs-regexp">//</span><span class="hljs-number">192.168</span>.<span class="hljs-number">0.29</span>:<span class="hljs-number">4041</span><br>Spark context available as <span class="hljs-string">&#x27;sc&#x27;</span> (master = local[*], app id = local-<span class="hljs-number">1650339265211</span>).<br>Spark session available as <span class="hljs-string">&#x27;spark&#x27;</span>.<br>Welcome to<br>      ____              __<br>     <span class="hljs-regexp">/ __/</span>__  ___ _____<span class="hljs-regexp">/ /</span>__<br>    _\ \<span class="hljs-regexp">/ _ \/ _ `/</span> __<span class="hljs-regexp">/  &#x27;_/</span><br>   <span class="hljs-regexp">/___/</span> .__<span class="hljs-regexp">/\_,_/</span>_<span class="hljs-regexp">/ /</span>_/\_\   version <span class="hljs-number">3.2</span>.<span class="hljs-number">1</span><br>      <span class="hljs-regexp">/_/</span><br>         <br>Using Scala version <span class="hljs-number">2.12</span>.<span class="hljs-number">15</span> (OpenJDK <span class="hljs-number">64</span>-Bit Server VM, Java <span class="hljs-number">11.0</span>.<span class="hljs-number">14.1</span>)<br>Type <span class="hljs-keyword">in</span> expressions to have them evaluated.<br>Type :help <span class="hljs-keyword">for</span> more information.<br><br>scala&gt; <br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Setting</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Setting</tag>
      
      <tag>Spark</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Ubuntu 20.04 설치하기</title>
    <link href="/2022/04/12/Ubuntu.md/"/>
    <url>/2022/04/12/Ubuntu.md/</url>
    
    <content type="html"><![CDATA[<p>﻿# Ubuntu 20.04 듀얼 부팅으로 설치하기</p><h2 id="설치-전-해야할-일"><a href="#설치-전-해야할-일" class="headerlink" title="설치 전 해야할 일"></a>설치 전 해야할 일</h2><p>우분투를 듀얼 부팅으로 설치하기 위해서는 부팅용 USB가 필요하다.<br>가급적 4GB 이상의 USB를 권장한다. 부팅용으로 만드는 과정에서 포맷이 된다는 점에 주의한다. </p><h2 id="부팅-디스크-만들기"><a href="#부팅-디스크-만들기" class="headerlink" title="부팅 디스크 만들기"></a>부팅 디스크 만들기</h2><p><a href="https://ubuntu.com/#download">https://ubuntu.com/#download</a><br>우분투 공식사이트에 접속하여 iso파일을 다운로드 한다.<br><a href="https://rufus.ie/ko/">https://rufus.ie/ko/</a><br>다운로드한 iso를 부팅 USB로 만들기 위해 rufus를 다운로드 한다.<br><img src="https://rufus.ie/pics/rufus_ko.png" alt="[출처 : rufus 공식 홈페이지 ]"><br>부팅 디스크를 만들 usb와 iso를 선택한 뒤 시작 버튼을 눌러주면 자동으로 부팅 디스크가 생성된다.</p><h2 id="파티션-분할하기"><a href="#파티션-분할하기" class="headerlink" title="파티션 분할하기"></a>파티션 분할하기</h2><p>키보드의 윈도우버튼(시작버튼)을 누른 뒤, <strong>하드디스크 파티션 만들기 및 포맷</strong>을 검색한다.<br><img src="http://ccm3.net/wp-content/uploads/04-137.png" alt="https://ccm3.net/archives/23854"><br>설치를 원하는 파티션에서 우클릭을 눌러, 불륨 축소를 선택하여 파티션을 분할한다.<br> <img src="http://ccm3.net/wp-content/uploads/05-117.png" alt="https://ccm3.net/archives/23854"><br>축소할 공간 입력에 MB(메가바이트)단위로 새로 만들 파티션의 크기를 입력 한 후 축소를 클릭해준다.<br><img src="http://ccm3.net/wp-content/uploads/05_6.png" alt="https://ccm3.net/archives/23854"><br>입력한 크기 만큼의 공간이 새로 만들어지게 된다.</p><h2 id="BIOS-설정"><a href="#BIOS-설정" class="headerlink" title="BIOS 설정"></a>BIOS 설정</h2><p><a href="https://blog.naver.com/tmdcjfdl3/221366662549">https://blog.naver.com/tmdcjfdl3/221366662549</a><br>상단의 링크를 참조하여 바이오스에 진입해준다.<br>그 후 바이오스 설정에서 boot~ 관련 메뉴로 진입하여<br>USB를 최상단으로 이동한 뒤 save 및 exit를 해준다.<br>이 부분은 바이오스마다 다르므로 각자 찾아보길 바란다.</p><h2 id="우분투-설치"><a href="#우분투-설치" class="headerlink" title="우분투 설치"></a>우분투 설치</h2><p>바이오스를 설정하고, 부팅 USB를 꽂은 다음 부팅을 하면<br>로딩 후에, Ubuntu로고가 뜨며, 설치 화면이 뜰 것이다.!<img src="https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory2&fname=https://t1.daumcdn.net/cfile/tistory/23425D3E596746D220"><br>해당 화면이 뜨면 체험하기가 아닌 설치를 눌러준다.<br><img src="https://blog.kakaocdn.net/dn/42Zhk/btqxYVs3ynL/K4Kp5hjMNGbcI8fARA3Gh0/img.jpg"><br>일반 설치와 최소 설치 중 자신이 원하는 옵션을 선택한다.<br>게임이나 미디어 플레이어 등을 필요로 하지 않기에 최소 설치로 선택하는 편이다.<br>기타 설정의 체크 항목은 둘 다 체크 해주는 것이 좋다.</p><p><img src="https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory2&fname=https://t1.daumcdn.net/cfile/tistory/24250F4B59674A3E08" alt="https://jimnong.tistory.com/676"><br>앞서 윈도우에서 분할한 별도의 파티션에 윈도우를 설치 할 예정이기 때문에 기타를 선택한다.<br><img src="https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory2&fname=https://t1.daumcdn.net/cfile/tistory/9987C84F5CAD8F6412"></p><p>먼저 스왑 파티션을 생성한다. <a href="https://sergeswin.com/1034/">스왑 파티션이란?</a><br>하단의 남은 공간을 클릭한 후 + 를 클릭하면 대화창이 뜬다.<br>용도는 스왑 영역, 파티션 종류는 논리 파티션, 파티션 위치는 이 공간이 시작하는 지점, 크기는 RAM이 2GB 미만일 경우 RAM의 2배, 2~8GB일 경우 RAM과 동일, RAM이 8GB 초과일 경우 최소 4GB 이상으로 설정 한다.<br>그리고 OK버튼을 누르면 스왑 파티션 생성이 완료된다.</p><p><img src="https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory2&fname=https://t1.daumcdn.net/cfile/tistory/2408D63D596753C427"><br>이제 루트 파티션을 생성한다. 크기를 남은 공간 전체로 세팅하고, 파티션의 종류는 논리 파티션, 파티션의 위치는 이 공간이 시작하는 지점, 용도는 ext4, 마운트 위치는 “ &#x2F; “ 로 지정한다. 그리고 OK버튼을 누르면 루트 파티션 생성이 완료된다.<br><img src="https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory2&fname=https://t1.daumcdn.net/cfile/tistory/257C03455967559F23"><br>파티션 생성이 완료 되었으면 루트 파티션을 클릭한 후, 지금 설치를 클릭하면 되는데, 이때 중요한 점이 부트로더의 위치이다. 여러개의 하드디스크를 사용하는 경우 가끔 오류로 부트로더가 다른 위치에 잡히는 경우가 있는데, 꼭 <strong>윈도우가 설치된</strong> 하드디스크의 최상단에 부트로더를 설치해야 부팅 실패를 겪지 않는다.</p><h2 id="나머지-설치"><a href="#나머지-설치" class="headerlink" title="나머지 설치"></a>나머지 설치</h2><p>지도 그림이 나올 경우 영어로 서울을 입력하거나 대한민국을 마우스로 찍는다.</p><p>키보드 레이아웃의 경우 “한국어 101&#x2F;104키”가 아닌 그냥 “한국어”를 선택해준다.</p><p>우분투 로그인 계정을 설정한다. 사용자 이름과 암호의 경우 많은 곳에서 쓰이기 때문에 잊어버리지 않게 주의한다.</p><h2 id="재부팅"><a href="#재부팅" class="headerlink" title="재부팅"></a>재부팅</h2><p><img src="https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory2&fname=https://t1.daumcdn.net/cfile/tistory/2751853C5967614D2C" alt="https://jimnong.tistory.com/676"><br>재부팅 후 모니터 상에 GRUB가 뜬다면 우분투가 제대로 설치 된 것이다.<br>↑ 키와 ↓키를 이용하여 우분투와 윈도우가 제대로 작동하는지 확인해 보길 바란다.</p>]]></content>
    
    
    <categories>
      
      <category>Setting</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Setting</tag>
      
      <tag>Ubuntu</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hexo Blog 테마 설정 하기</title>
    <link href="/2022/03/14/Github%20blog%20Theme.md/"/>
    <url>/2022/03/14/Github%20blog%20Theme.md/</url>
    
    <content type="html"><![CDATA[<h1 id="hexo-blog-테마-설정"><a href="#hexo-blog-테마-설정" class="headerlink" title="hexo blog 테마 설정"></a>hexo blog 테마 설정</h1><p><a href="https://hexo.io/themes/">hexo 테마 공식 사이트</a>에 접속하여 원하는 테마를 찾아본 다음,<br>테마의 공식 문서 설명에 따라 설치하면 된다.</p><h2 id="icarus-설정"><a href="#icarus-설정" class="headerlink" title="icarus 설정"></a>icarus 설정</h2><p>터미널을 실행하고 하단의 코드를 입력한다</p><figure class="highlight ada"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><pre><code class="hljs ada">$ npm install <span class="hljs-comment">--save hexo-theme-icarus</span><br></code></pre></td></tr></table></figure><p>hexo blog 경로의 config.yml 파일을 실행한 뒤 theme를 fluid로 수정한다.</p><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs avrasm"><span class="hljs-symbol">theme:</span> icarus<br></code></pre></td></tr></table></figure><p>서버를 실행하여 제대로 적용되었는지 확인한다.</p><figure class="highlight axapta"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs axapta">hexo <span class="hljs-keyword">server</span><br></code></pre></td></tr></table></figure><h2 id="fluid-설정"><a href="#fluid-설정" class="headerlink" title="fluid 설정"></a>fluid 설정</h2><p>터미널을 실행하고 하단의 코드를 입력한다.</p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ada">$ npm install <span class="hljs-comment">--save hexo-theme-fluid</span><br></code></pre></td></tr></table></figure><p>hexo blog 경로의 config.yml 파일을 실행한 뒤 theme를 fluid로 수정한다.</p><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs avrasm"><span class="hljs-symbol">theme:</span> fluid<br><span class="hljs-symbol">language:</span> <span class="hljs-built_in">zh</span>-CN<br></code></pre></td></tr></table></figure><p>터미널에 하단의 코드를 입력하여 about 페이지를 만든다.</p><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs haxe">$ hexo <span class="hljs-keyword">new</span> <span class="hljs-type">page</span> about<br></code></pre></td></tr></table></figure><p>서버를 실행하여 제대로 적용되었는지 확인한다.</p><figure class="highlight axapta"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs axapta">hexo <span class="hljs-keyword">server</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Setting</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Github blog</tag>
      
      <tag>Setting</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Python 개발 환경 설정 하기</title>
    <link href="/2022/03/13/python%20%EA%B0%9C%EB%B0%9C%ED%99%98%EA%B2%BD%20%EC%84%A4%EC%B9%98/"/>
    <url>/2022/03/13/python%20%EA%B0%9C%EB%B0%9C%ED%99%98%EA%B2%BD%20%EC%84%A4%EC%B9%98/</url>
    
    <content type="html"><![CDATA[<h1 id="파이썬-개발-환경-설정하기"><a href="#파이썬-개발-환경-설정하기" class="headerlink" title="파이썬 개발 환경 설정하기"></a>파이썬 개발 환경 설정하기</h1><h2 id="Pycharm-설치하기"><a href="#Pycharm-설치하기" class="headerlink" title="Pycharm 설치하기"></a>Pycharm 설치하기</h2><p><a href="https://www.jetbrains.com/ko-kr/pycharm/download/#section=windows">Pycharm 공식 사이트</a>에 방문하여 자신의 운영체제 및 컴퓨터 사양에 맞는 프로그램을  Community 버전으로 다운 받는다.</p><h3 id="Windows"><a href="#Windows" class="headerlink" title="Windows"></a>Windows</h3><p>설치 파일이 다운로드 되면 Next &gt; Next &gt; 체크 옵션에서 모두 체크 &gt; Install &gt; 재부팅을 거쳐 설치한다.</p><h3 id="Mac"><a href="#Mac" class="headerlink" title="Mac"></a>Mac</h3><p>다운로드 된 dmg파일을 실행한 후 Pycharm.app을 Applications으로 옮긴다.<br>그 후 Applications 폴더 내에서 설치 된 Pycharm을 확인한다.</p><h3 id="Ubuntu"><a href="#Ubuntu" class="headerlink" title="Ubuntu"></a>Ubuntu</h3><p>터미널을 열고 하단의 코드를 순서대로 입력한다.</p><figure class="highlight powershell"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><pre><code class="hljs powershell"><span class="hljs-variable">$</span> <span class="hljs-built_in">cd</span> Downloads<br><span class="hljs-variable">$</span> tar xvf pycharm<span class="hljs-literal">-community-2022</span>.<span class="hljs-number">1</span>.tar.gz<br><span class="hljs-variable">$</span> <span class="hljs-built_in">cd</span> pycharm<span class="hljs-literal">-community-2022</span>.<span class="hljs-number">1</span><br><span class="hljs-variable">$</span> <span class="hljs-built_in">cd</span> bin<br><span class="hljs-variable">$</span> sh pycharm.sh<br></code></pre></td></tr></table></figure><p>파이참이 실행되면 상단 메뉴에서 Tools &gt; Create Desktop Entry 를 선택하여 바탕화면 바로가기를 만들어준다. </p><h2 id="아나콘다-설치하기"><a href="#아나콘다-설치하기" class="headerlink" title="아나콘다 설치하기"></a>아나콘다 설치하기</h2><p><a href="https://www.anaconda.com/products/distribution">아나콘다 공식 사이트</a>에 방문하여 자신의 운영체제 및 컴퓨터 사양에 맞는  프로그램을 다운 받는다.</p><h3 id="Windows-1"><a href="#Windows-1" class="headerlink" title="Windows"></a>Windows</h3><p>설치 파일이 다운로드 되면 Next &gt; I Agree&gt; <strong>All users</strong>&gt; Next &gt; <strong>체크 옵션에서는 두 가지 모두 체크</strong> &gt; Install  &gt;  Next &gt; Next &gt; Finish 순으로 설치한다.</p><h3 id="Mac-1"><a href="#Mac-1" class="headerlink" title="Mac"></a>Mac</h3><p>설치 파일이 다운로드 되면 Next를 계속 눌러 설치를 진행한다.</p><h3 id="Ubuntu-1"><a href="#Ubuntu-1" class="headerlink" title="Ubuntu"></a>Ubuntu</h3><p>wget을 이용하여 프로그램을 다운받은 후 sh 명령어로 설치한다.<br>다운로드 링크에서 우클릭하여 링크 주소를 복사한다.</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">wget</span> https://repo.anaconda.com/archive/Anaconda3-<span class="hljs-number">2021</span>.<span class="hljs-number">11</span>-Linux-x86_64.sh<br><span class="hljs-attribute">sh</span> Anaconda3-<span class="hljs-number">2021</span>.<span class="hljs-number">11</span>-Linux-x86_64.sh<br></code></pre></td></tr></table></figure><p>라이센스 설명 enter , yes &gt; 디렉토리 설치 enter &gt; .bashrc yes 순으로 하면 설치가완료된다.</p><h2 id="VSCode-설치하기"><a href="#VSCode-설치하기" class="headerlink" title="VSCode 설치하기"></a>VSCode 설치하기</h2><p><a href="https://code.visualstudio.com/download">VSCode 공식 사이트</a>에 방문하여<br>자신의 운영체제 및 컴퓨터 사양에 맞는 프로그램을 다운 받는다.</p><h3 id="Windows-2"><a href="#Windows-2" class="headerlink" title="Windows"></a>Windows</h3><p>System Installer으로 다운 받는다.<br>Next &gt; 체크 옵션에서는 다 체크 &gt;  Next &gt; Finish 로 설치를 완료한다.</p><h3 id="Mac-2"><a href="#Mac-2" class="headerlink" title="Mac"></a>Mac</h3><p>다운로드 된 파일의 압축을 해제한 후 Applications으로 복사해주면 설치가 완료된다. </p><h3 id="Ubuntu-2"><a href="#Ubuntu-2" class="headerlink" title="Ubuntu"></a>Ubuntu</h3><p>다운로드 사이트에서 .deb 파일을 다운로드 받거나,<br>터미널을 열어서</p><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs armasm"><span class="hljs-symbol">sudo</span> apt install <span class="hljs-meta">code</span><br></code></pre></td></tr></table></figure><p>을 입력해주면 된다.</p>]]></content>
    
    
    <categories>
      
      <category>Setting</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Setting</tag>
      
      <tag>Python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hexo 블로그 만들기</title>
    <link href="/2022/03/10/Github%20blog/"/>
    <url>/2022/03/10/Github%20blog/</url>
    
    <content type="html"><![CDATA[<h1 id="Hexo-블로그"><a href="#Hexo-블로그" class="headerlink" title="Hexo 블로그"></a>Hexo 블로그</h1><p>Node.js기반의 블로그인 hexo 블로그를 설치하는 방법에 대해 배워본다.</p><h2 id="프로그램-설치-및-환경-설정"><a href="#프로그램-설치-및-환경-설정" class="headerlink" title="프로그램 설치 및 환경 설정"></a>프로그램 설치 및 환경 설정</h2><p>hexo 블로그의 버전 관리를 위한 프로그램인 git을 먼저 설치한다.</p><figure class="highlight cmake"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><pre><code class="hljs cmake">sudo apt <span class="hljs-keyword">install</span> git<br></code></pre></td></tr></table></figure><p>그 후 Node.js를 설치한다.</p><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs armasm"><span class="hljs-symbol">curl</span> -<span class="hljs-built_in">sL</span> https:<span class="hljs-comment">//deb.nodesource.com/setup_14.x | sudo -E bash -</span><br></code></pre></td></tr></table></figure><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">sudo apt-<span class="hljs-built_in">get</span> install nodejs<br></code></pre></td></tr></table></figure><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs crmsh"><span class="hljs-keyword">node</span> <span class="hljs-title">--version</span><br></code></pre></td></tr></table></figure><p>Ubuntu 20.04 버전의 경우 방화벽이 기본적으로 되어 있기에,<br>hexo server를 방화벽에서 허용하는 작업이 필요하다.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">sudo apt install ufw</span><br></code></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">sudo ufw allow <span class="hljs-string">&quot;OpenSSH&quot;</span></span><br></code></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">sudo ufw <span class="hljs-built_in">enable</span></span><br></code></pre></td></tr></table></figure><p>포트 4000의 경우 hexo server의 기본 포트이다.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">sudo ufw allow 4000</span><br></code></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">sudo ufw allow http</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">sudo ufw allow https</span><br></code></pre></td></tr></table></figure><h2 id="hexo-설치"><a href="#hexo-설치" class="headerlink" title="hexo 설치"></a>hexo 설치</h2><p>hexo 패키지를 설치한다.</p><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs avrasm">$ sudo npm install hexo-<span class="hljs-keyword">cli</span> -g<br></code></pre></td></tr></table></figure><p>hexo server가 설치될 폴더를 생성한다.</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">$ sudo mkdir -p <span class="hljs-regexp">/home/</span>huisu<span class="hljs-regexp">/Documents/</span>hexo<br></code></pre></td></tr></table></figure><p>hexo server 폴더에 필요한 권한과 소유권을 지정한다.</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs awk">$ sudo chown <span class="hljs-variable">$USER</span>:<span class="hljs-variable">$USER</span> <span class="hljs-regexp">/home/</span>huisu<span class="hljs-regexp">/Documents/</span>hexo<br>$ sudo chmod -R <span class="hljs-number">755</span> <span class="hljs-regexp">/home/</span>huisu<span class="hljs-regexp">/Documents/</span>hexo<br></code></pre></td></tr></table></figure><p>hexo server 폴더로 이동한다.</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">$ cd <span class="hljs-regexp">/home/</span>huisu<span class="hljs-regexp">/Documents/</span>hexo<br></code></pre></td></tr></table></figure><p>hexo 블로그를 초기화 한다.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">hexo init<br></code></pre></td></tr></table></figure><p>hexo를 설치한다.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">npm install<br></code></pre></td></tr></table></figure><h2 id="Github-설정"><a href="#Github-설정" class="headerlink" title="Github 설정"></a>Github 설정</h2><p>hexo 블로그는 두개의 깃허브 저장소를 사용하는데, 하나는 배포 페이지이고, 다른 하나는 실제 소스가 들어가는 페이지이다.</p><p>배포 페이지 저장소 이름은 사용자이름.github.io로 만들어야 기억하기 쉽다. 실제 소스가 저장되는 저장소도 하나 만든다.</p><p><a href="https://github.com/new">Github 저장소 만들기</a></p><h2 id="config-yml-설정"><a href="#config-yml-설정" class="headerlink" title="config.yml 설정"></a>config.yml 설정</h2><p>Github를 통해 블로그를 웹에서 접속되게 하려면 Github 연동이 필요하다.<br>config.yml에서 Github연동이 가능하다.<br>Hexo가 설치된 경로로 이동한 후, config.yml 파일을 연다.</p><p>Github 연동을 위해 하단 처럼 변경한다.</p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs dts"><span class="hljs-symbol">deploy:</span><br><span class="hljs-symbol">  type:</span> git<br><span class="hljs-symbol">  repo:</span> https:<span class="hljs-comment">//github.com/huisu9903/huisu9903.github.io.git</span><br><span class="hljs-symbol">  branch:</span> main<br></code></pre></td></tr></table></figure><p>또한 title, subtitle, author 등을 수정하여 자신만의 블로그를 만들 수 있다.</p><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs avrasm"><span class="hljs-symbol">title:</span> 제목을 지어주세요<br><span class="hljs-symbol">subtitle:</span> 부제목을 지어주세요<br><span class="hljs-symbol">description:</span> description을 지어주세요<br><span class="hljs-symbol">author:</span> YourName<br></code></pre></td></tr></table></figure><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs elixir"><span class="hljs-symbol">url:</span> <span class="hljs-symbol">https:</span>//huisu9903.github.io<br><span class="hljs-symbol">root:</span> /<br><span class="hljs-symbol">permalink:</span> <span class="hljs-symbol">:year/</span><span class="hljs-symbol">:month/</span><span class="hljs-symbol">:day/</span><span class="hljs-symbol">:title/</span><br><span class="hljs-symbol">permalink_defaults:</span><br></code></pre></td></tr></table></figure><p>설정이 완료되면 hexo가 설치된 폴더에서 터미널을 연 다음 하단의 명령어를 입력한다.</p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs verilog">$ hexo <span class="hljs-keyword">generate</span> <br>$ hexo server<br></code></pre></td></tr></table></figure><p> <a href="http://localhost:4000/">http://localhost:4000</a> 를 인터넷 브라우저에 입력하여 헥소가 정상적으로 작동하는지 확인한다.</p><h2 id="github에-배포하기"><a href="#github에-배포하기" class="headerlink" title="github에 배포하기"></a>github에 배포하기</h2><p>하단의 명령어를 입력하여 배포를 진행한다.</p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs verilog">$ hexo deploy --<span class="hljs-keyword">generate</span><br></code></pre></td></tr></table></figure><p>배포가 완료되면 username.github.io로 접속해서 배포가 정상적으로 되었는지 확인해본다.</p>]]></content>
    
    
    <categories>
      
      <category>Setting</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Github blog</tag>
      
      <tag>Setting</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
